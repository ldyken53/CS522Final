{"ast":null,"code":"var _jsxFileName = \"/Users/kokofan/Documents/project/CS522_analysis/src/pieChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlotPieChart(props) {\n  _s();\n  // //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  // console.log(svg, height, width, tTip);\n\n  const chartSelection = useMemo(() => {\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n  });\n  console.log('props', props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n// //change the code below to modify the bottom plot view\n// export default function WhiteHatStats(props){\n//     //this is a generic component for plotting a d3 plot\n//     const d3Container = useRef(null);\n//     //this automatically constructs an svg canvas the size of the parent container (height and width)\n//     //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n//     //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n//     const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n\n//     const margin = 50;\n//     // const radius = 10;\n\n//     function cleanString(string){\n//         return string.replace(' ','_').replace(' ','_');\n//     }\n\n//     //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. This other representation could be a histogram, a stacked bar chart, etc.\n//     //this loop updates when the props.data changes or the window resizes\n//     //we can edit it to also use props.brushedState if you want to use linking\n//     const chartSelection = useMemo(()=>{\n//         //wait until the data loads\n//         if(svg === undefined | props.data === undefined){ return }\n\n//         //aggregate gun deaths by state\n//         const data = props.data.states;\n\n//         // Get min and max gun deaths by state \n\n//         //get data for each state\n//         const plotData = [];\n//         for(let state of data){\n//             let entry = {\n//                 'ab': state.abreviation,\n//                 'name': state.state,\n//                 'population': state.population,\n//                 'count': state.count,\n//                 'maleCount': state.male_count,\n//                 'femaleCount': state.count - state.male_count,\n//                 'ratio': state.count / state.population * 100000,\n//                 'male': state.male_count / state.population * 100000,\n//                 'female': (state.count - state.male_count) / state.population * 100000,\n//             }\n//             plotData.push(entry)\n//         }\n\n//         const ratiomap = d => d.ratio;\n//         const stateRatios = Object.values(plotData).map(ratiomap);\n//         const [ratioMin,ratioMax] = d3.extent(stateRatios);\n\n//         // get abreviations (for x axis)\n//         var groups = d3.map(data, function(d){return(d.abreviation)})\n\n//         // set x axis\n//         var xScale = d3.scaleBand()\n//                   .domain(groups)\n//                   .range([0, width - margin])\n//                   .padding([0.3])\n\n//         // position of x axis\n//         svg.append(\"g\")\n//            .attr(\"transform\", \"translate(\" + margin + \", \" + (height - margin) + \")\")\n//            .call(d3.axisBottom(xScale).tickSizeOuter(0));\n\n//         // set y axis\n//         let yScale = d3.scaleLinear()\n//                        .domain([ratioMax, 0])\n//                        .range([margin, height - margin]);\n\n//         // position of y axis\n//         svg.append(\"g\")\n//            .attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\")\n//            .call(d3.axisLeft(yScale));\n\n//         var barkeys = ['male', 'female'];\n\n//         // color map\n//         var color = d3.scaleOrdinal()\n//                       .domain(barkeys)\n//                       .range(['#08519c','#a3baff'])\n\n//         // create stack data\n//         var stackedData = d3.stack()\n//                             .keys(barkeys)\n//                             (plotData)\n\n//         // draw stack chart\n//         let chartGroup = svg.append(\"g\")\n//                             .attr('class','stack')\n//                             .attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\");\n\n//         chartGroup.selectAll(\"g\")\n//            .data(stackedData)\n//            .enter().append(\"g\")\n//            .attr(\"fill\", function(d) { return color(d.key); })\n//            .selectAll(\"rect\")\n//            .attr('class','stack-rect')\n//            .data(function(d) { return d; })\n//            .enter().append(\"rect\")\n//            .attr('class','stack-rect')\n//            .attr('id',d=> cleanString(d.data.name))\n//            .attr(\"x\", function(d) { return xScale(d.data.ab); })\n//            .attr(\"y\", function(d) { return yScale(d[1]); })\n//            .attr(\"height\", function(d) { return yScale(d[0]) - yScale(d[1]); })\n//            .attr(\"width\", xScale.bandwidth())\n//            .attr('stroke','black')\n//            .attr('stroke-width',.1)\n//            .on('mouseover',(e,d)=>{\n//                 let state = cleanString(d.data.name);\n//                 //this updates the brushed state\n//                 if(props.brushedState !== state){\n//                     props.setBrushedState(state);\n//                 }\n//                 var ratios, deaths;\n//                 if (d[0] == 0) { \n//                     ratios = 'Male-Ratio: ' + d.data.male; \n//                     deaths = 'Male-Deaths: ' + d.data.maleCount;\n//                 }\n//                 else { \n//                     ratios = 'Female-Ratio: ' + d.data.female;\n//                     deaths = 'Female-Deaths: ' + d.data.femaleCount;\n//                 }\n//                 let string = d.data.name + '</br>'\n//                     + '</br>'\n//                     + ratios + '</br>'\n//                     + deaths + '</br>'\n//                     + 'Total-Deatchs: ' + d.data.count + '</br>'\n//                     + 'Population: ' + d.data.population;\n//                 props.ToolTip.moveTTipEvent(tTip,e)\n//                 tTip.html(string)\n//             }).on('mousemove',(e)=>{\n//                 props.ToolTip.moveTTipEvent(tTip,e);\n//             }).on('mouseout',(e,d)=>{\n//                 props.setBrushedState();\n//                 props.ToolTip.hideTTip(tTip);\n//             });\n\n//         // legends group\n//         var legend = svg.append('g')\n//             .attr('class', 'legend')\n//             .attr('transform', 'translate(' + (width - 3*margin) + \", \" + margin + ')' );\n\n//         // draw legends\n//         legend.selectAll('rect')\n//               .data(barkeys)\n//               .enter()\n//               .append('rect')\n//               .attr('x', 0)\n//               .attr('y', function(d, i){ return i * 18; })\n//               .attr('width', 12)\n//               .attr('height', 12)\n//               .attr('fill', function(d, i){\n//                   return color(i);\n//               });\n\n//         // names of legends\n//         legend.selectAll('text')\n//               .data(barkeys)\n//               .enter()\n//               .append('text')\n//               .text(function(d){ return d[0].toUpperCase() + d.slice(1) + \"-Deaths\"; })\n//               .attr('x', 18)\n//               .attr('y', function(d, i){ return i * 18;})\n//               .attr('text-anchor', 'start')\n//               .attr('alignment-baseline', 'hanging');\n\n//         // lable of x axis\n//         svg.append(\"text\")\n//            .attr(\"class\", \"x-label\")\n//            .attr(\"x\", width/2)\n//            .attr(\"y\", height - margin/4)\n//            .attr(\"text-anchor\", \"middle\")\n//            .text(\"State (abreviation)\")\n\n//         // lable of y axis\n//         svg.append(\"text\")\n//            .attr(\"class\", \"y-label\")\n//            .attr(\"text-anchor\", \"middle\")\n//            .attr(\"x\", -height/2)\n//            .attr(\"y\", 0)\n//            .attr(\"dy\", \".75em\")\n//            .attr(\"transform\", \"rotate(-90)\")\n//            .text(\"Gun deaths 100,000 Population\");\n\n//     //     //get transforms for each value into x and y coordinates\n//     //     let xScale = d3.scaleLinear()\n//     //         .domain(d3.extent(plotData,d=>d.easeOfDrawing))\n//     //         .range([margin+radius,width-margin-radius]);\n//     //     let yScale = d3.scaleLinear()\n//     //         .domain(d3.extent(plotData,d=>d.count))\n//     //         .range([height-margin-radius,margin+radius]);\n\n//     //     //draw a line showing the mean values across the curve\n//     //     //this probably isn't actually regression\n//     //     const regressionLine = [];\n//     //     for(let i = 0; i <= 10; i+= 1){\n//     //         let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n//     //         let meanY = 0;\n//     //         if(pvals.length > 0){\n//     //             for(let entry of pvals){\n//     //                 meanY += entry.count/pvals.length\n//     //             }\n//     //         }\n//     //         let point = [xScale(i),yScale(meanY)]\n//     //         regressionLine.push(point)\n//     //     }\n\n//     //     //scale color by gender ratio for no reason\n//     //     let colorScale = d3.scaleDiverging()\n//     //         .domain([0,.5,1])\n//     //         .range(['magenta','white','navy']);\n\n//     //     //draw the circles for each state\n//     //     svg.selectAll('.dot').remove();\n//     //     svg.selectAll('.dot').data(plotData)\n//     //         .enter().append('circle')\n//     //         .attr('cy',d=> yScale(d.count))\n//     //         .attr('cx',d=>xScale(d.easeOfDrawing))\n//     //         .attr('fill',d=> colorScale(d.genderRatio))\n//     //         .attr('r',10)\n//     //         .on('mouseover',(e,d)=>{\n//     //             let string = d.name + '</br>'\n//     //                 + 'Gun Deaths: ' + d.count + '</br>'\n//     //                 + 'Difficulty Drawing: ' + d.easeOfDrawing;\n//     //             props.ToolTip.moveTTipEvent(tTip,e)\n//     //             tTip.html(string)\n//     //         }).on('mousemove',(e)=>{\n//     //             props.ToolTip.moveTTipEvent(tTip,e);\n//     //         }).on('mouseout',(e,d)=>{\n//     //             props.ToolTip.hideTTip(tTip);\n//     //         });\n\n//     //     //draw the line\n//     //     svg.selectAll('.regressionLine').remove();\n//     //     svg.append('path').attr('class','regressionLine')\n//     //         .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\n//     //         .attr('stroke-width',5)\n//     //         .attr('stroke','black')\n//     //         .attr('fill','none');\n\n//         // change the title\n//         const labelSize = margin/2;\n//         svg.append('text')\n//             .attr('x',width/2)\n//             .attr('y',labelSize)\n//             .attr('text-anchor','middle')\n//             .attr('font-size',labelSize)\n//             .attr('font-weight','bold')\n//             .text('Gun Deaths per 100,000 Population by State');\n\n//     //     //change the disclaimer here\n//     //     svg.append('text')\n//     //         .attr('x',width-20)\n//     //         .attr('y',height/3)\n//     //         .attr('text-anchor','end')\n//     //         .attr('font-size',10)\n//     //         .text(\"I'm just asking questions\");\n\n//     //     //draw basic axes using the x and y scales\n//     //     svg.selectAll('g').remove()\n//     //     svg.append('g')\n//     //         .attr('transform',`translate(0,${height-margin+1})`)\n//     //         .call(d3.axisBottom(xScale))\n\n//     //     svg.append('g')\n//     //         .attr('transform',`translate(${margin-2},0)`)\n//     //         .call(d3.axisLeft(yScale))\n\n//         return chartGroup;\n\n//     },[props.data,svg]);\n\n//     useMemo(()=>{\n//         if(chartSelection !== undefined){\n//             const isBrushed = props.brushedState !== undefined;\n//             chartSelection.selectAll('.stack-rect')\n//                           .attr('opacity',isBrushed? 0.2:0.5);\n//             if(isBrushed){\n//                 chartSelection.select('#'+props.brushedState)\n//                     .attr('opacity',1);\n//             }\n//         }\n//     },[chartSelection,props.brushedState]);\n\n//     return (\n//         <div\n//             className={\"d3-component\"}\n//             style={{'height':'99%','width':'99%'}}\n//             ref={d3Container}\n//         ></div>\n//     );\n// }\n_s(PlotPieChart, \"ZIF2Y6G+4lDrENfXS4yyPmH62/0=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = PlotPieChart;\nvar _c;\n$RefreshReg$(_c, \"PlotPieChart\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","PlotPieChart","props","_s","d3Container","svg","height","width","tTip","chartSelection","undefined","data","console","log","className","style","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kokofan/Documents/project/CS522_analysis/src/pieChart.js"],"sourcesContent":["import React, {useEffect, useRef, useMemo} from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n\nexport default function PlotPieChart(props){\n    // //this is a generic component for plotting a d3 plot\n    const d3Container = useRef(null);\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n    // console.log(svg, height, width, tTip);\n\n    const chartSelection = useMemo(()=>{\n        if(svg === undefined | props.data === undefined){ return }\n\n    });\n\n    console.log('props', props);\n\n    return (\n        <div\n            className={\"d3-component\"}\n            style={{'height':'99%','width':'99%'}}\n            ref={d3Container}\n        ></div>\n    );\n}\n\n// //change the code below to modify the bottom plot view\n// export default function WhiteHatStats(props){\n//     //this is a generic component for plotting a d3 plot\n//     const d3Container = useRef(null);\n//     //this automatically constructs an svg canvas the size of the parent container (height and width)\n//     //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n//     //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n//     const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n\n//     const margin = 50;\n//     // const radius = 10;\n\n//     function cleanString(string){\n//         return string.replace(' ','_').replace(' ','_');\n//     }\n\n\n//     //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. This other representation could be a histogram, a stacked bar chart, etc.\n//     //this loop updates when the props.data changes or the window resizes\n//     //we can edit it to also use props.brushedState if you want to use linking\n//     const chartSelection = useMemo(()=>{\n//         //wait until the data loads\n//         if(svg === undefined | props.data === undefined){ return }\n\n//         //aggregate gun deaths by state\n//         const data = props.data.states;\n\n//         // Get min and max gun deaths by state \n\n//         //get data for each state\n//         const plotData = [];\n//         for(let state of data){\n//             let entry = {\n//                 'ab': state.abreviation,\n//                 'name': state.state,\n//                 'population': state.population,\n//                 'count': state.count,\n//                 'maleCount': state.male_count,\n//                 'femaleCount': state.count - state.male_count,\n//                 'ratio': state.count / state.population * 100000,\n//                 'male': state.male_count / state.population * 100000,\n//                 'female': (state.count - state.male_count) / state.population * 100000,\n//             }\n//             plotData.push(entry)\n//         }\n\n//         const ratiomap = d => d.ratio;\n//         const stateRatios = Object.values(plotData).map(ratiomap);\n//         const [ratioMin,ratioMax] = d3.extent(stateRatios);\n\n//         // get abreviations (for x axis)\n//         var groups = d3.map(data, function(d){return(d.abreviation)})\n\n//         // set x axis\n//         var xScale = d3.scaleBand()\n//                   .domain(groups)\n//                   .range([0, width - margin])\n//                   .padding([0.3])\n        \n//         // position of x axis\n//         svg.append(\"g\")\n//            .attr(\"transform\", \"translate(\" + margin + \", \" + (height - margin) + \")\")\n//            .call(d3.axisBottom(xScale).tickSizeOuter(0));\n\n//         // set y axis\n//         let yScale = d3.scaleLinear()\n//                        .domain([ratioMax, 0])\n//                        .range([margin, height - margin]);\n        \n//         // position of y axis\n//         svg.append(\"g\")\n//            .attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\")\n//            .call(d3.axisLeft(yScale));\n\n//         var barkeys = ['male', 'female'];\n\n//         // color map\n//         var color = d3.scaleOrdinal()\n//                       .domain(barkeys)\n//                       .range(['#08519c','#a3baff'])\n\n//         // create stack data\n//         var stackedData = d3.stack()\n//                             .keys(barkeys)\n//                             (plotData)\n\n//         // draw stack chart\n//         let chartGroup = svg.append(\"g\")\n//                             .attr('class','stack')\n//                             .attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\");\n        \n//         chartGroup.selectAll(\"g\")\n//            .data(stackedData)\n//            .enter().append(\"g\")\n//            .attr(\"fill\", function(d) { return color(d.key); })\n//            .selectAll(\"rect\")\n//            .attr('class','stack-rect')\n//            .data(function(d) { return d; })\n//            .enter().append(\"rect\")\n//            .attr('class','stack-rect')\n//            .attr('id',d=> cleanString(d.data.name))\n//            .attr(\"x\", function(d) { return xScale(d.data.ab); })\n//            .attr(\"y\", function(d) { return yScale(d[1]); })\n//            .attr(\"height\", function(d) { return yScale(d[0]) - yScale(d[1]); })\n//            .attr(\"width\", xScale.bandwidth())\n//            .attr('stroke','black')\n//            .attr('stroke-width',.1)\n//            .on('mouseover',(e,d)=>{\n//                 let state = cleanString(d.data.name);\n//                 //this updates the brushed state\n//                 if(props.brushedState !== state){\n//                     props.setBrushedState(state);\n//                 }\n//                 var ratios, deaths;\n//                 if (d[0] == 0) { \n//                     ratios = 'Male-Ratio: ' + d.data.male; \n//                     deaths = 'Male-Deaths: ' + d.data.maleCount;\n//                 }\n//                 else { \n//                     ratios = 'Female-Ratio: ' + d.data.female;\n//                     deaths = 'Female-Deaths: ' + d.data.femaleCount;\n//                 }\n//                 let string = d.data.name + '</br>'\n//                     + '</br>'\n//                     + ratios + '</br>'\n//                     + deaths + '</br>'\n//                     + 'Total-Deatchs: ' + d.data.count + '</br>'\n//                     + 'Population: ' + d.data.population;\n//                 props.ToolTip.moveTTipEvent(tTip,e)\n//                 tTip.html(string)\n//             }).on('mousemove',(e)=>{\n//                 props.ToolTip.moveTTipEvent(tTip,e);\n//             }).on('mouseout',(e,d)=>{\n//                 props.setBrushedState();\n//                 props.ToolTip.hideTTip(tTip);\n//             });\n\n//         // legends group\n//         var legend = svg.append('g')\n//             .attr('class', 'legend')\n//             .attr('transform', 'translate(' + (width - 3*margin) + \", \" + margin + ')' );\n\n//         // draw legends\n//         legend.selectAll('rect')\n//               .data(barkeys)\n//               .enter()\n//               .append('rect')\n//               .attr('x', 0)\n//               .attr('y', function(d, i){ return i * 18; })\n//               .attr('width', 12)\n//               .attr('height', 12)\n//               .attr('fill', function(d, i){\n//                   return color(i);\n//               });\n\n//         // names of legends\n//         legend.selectAll('text')\n//               .data(barkeys)\n//               .enter()\n//               .append('text')\n//               .text(function(d){ return d[0].toUpperCase() + d.slice(1) + \"-Deaths\"; })\n//               .attr('x', 18)\n//               .attr('y', function(d, i){ return i * 18;})\n//               .attr('text-anchor', 'start')\n//               .attr('alignment-baseline', 'hanging');\n\n//         // lable of x axis\n//         svg.append(\"text\")\n//            .attr(\"class\", \"x-label\")\n//            .attr(\"x\", width/2)\n//            .attr(\"y\", height - margin/4)\n//            .attr(\"text-anchor\", \"middle\")\n//            .text(\"State (abreviation)\")\n\n//         // lable of y axis\n//         svg.append(\"text\")\n//            .attr(\"class\", \"y-label\")\n//            .attr(\"text-anchor\", \"middle\")\n//            .attr(\"x\", -height/2)\n//            .attr(\"y\", 0)\n//            .attr(\"dy\", \".75em\")\n//            .attr(\"transform\", \"rotate(-90)\")\n//            .text(\"Gun deaths 100,000 Population\");\n\n//     //     //get transforms for each value into x and y coordinates\n//     //     let xScale = d3.scaleLinear()\n//     //         .domain(d3.extent(plotData,d=>d.easeOfDrawing))\n//     //         .range([margin+radius,width-margin-radius]);\n//     //     let yScale = d3.scaleLinear()\n//     //         .domain(d3.extent(plotData,d=>d.count))\n//     //         .range([height-margin-radius,margin+radius]);\n\n\n//     //     //draw a line showing the mean values across the curve\n//     //     //this probably isn't actually regression\n//     //     const regressionLine = [];\n//     //     for(let i = 0; i <= 10; i+= 1){\n//     //         let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n//     //         let meanY = 0;\n//     //         if(pvals.length > 0){\n//     //             for(let entry of pvals){\n//     //                 meanY += entry.count/pvals.length\n//     //             }\n//     //         }\n//     //         let point = [xScale(i),yScale(meanY)]\n//     //         regressionLine.push(point)\n//     //     }\n        \n//     //     //scale color by gender ratio for no reason\n//     //     let colorScale = d3.scaleDiverging()\n//     //         .domain([0,.5,1])\n//     //         .range(['magenta','white','navy']);\n\n//     //     //draw the circles for each state\n//     //     svg.selectAll('.dot').remove();\n//     //     svg.selectAll('.dot').data(plotData)\n//     //         .enter().append('circle')\n//     //         .attr('cy',d=> yScale(d.count))\n//     //         .attr('cx',d=>xScale(d.easeOfDrawing))\n//     //         .attr('fill',d=> colorScale(d.genderRatio))\n//     //         .attr('r',10)\n//     //         .on('mouseover',(e,d)=>{\n//     //             let string = d.name + '</br>'\n//     //                 + 'Gun Deaths: ' + d.count + '</br>'\n//     //                 + 'Difficulty Drawing: ' + d.easeOfDrawing;\n//     //             props.ToolTip.moveTTipEvent(tTip,e)\n//     //             tTip.html(string)\n//     //         }).on('mousemove',(e)=>{\n//     //             props.ToolTip.moveTTipEvent(tTip,e);\n//     //         }).on('mouseout',(e,d)=>{\n//     //             props.ToolTip.hideTTip(tTip);\n//     //         });\n           \n//     //     //draw the line\n//     //     svg.selectAll('.regressionLine').remove();\n//     //     svg.append('path').attr('class','regressionLine')\n//     //         .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\n//     //         .attr('stroke-width',5)\n//     //         .attr('stroke','black')\n//     //         .attr('fill','none');\n\n//         // change the title\n//         const labelSize = margin/2;\n//         svg.append('text')\n//             .attr('x',width/2)\n//             .attr('y',labelSize)\n//             .attr('text-anchor','middle')\n//             .attr('font-size',labelSize)\n//             .attr('font-weight','bold')\n//             .text('Gun Deaths per 100,000 Population by State');\n\n//     //     //change the disclaimer here\n//     //     svg.append('text')\n//     //         .attr('x',width-20)\n//     //         .attr('y',height/3)\n//     //         .attr('text-anchor','end')\n//     //         .attr('font-size',10)\n//     //         .text(\"I'm just asking questions\");\n\n//     //     //draw basic axes using the x and y scales\n//     //     svg.selectAll('g').remove()\n//     //     svg.append('g')\n//     //         .attr('transform',`translate(0,${height-margin+1})`)\n//     //         .call(d3.axisBottom(xScale))\n\n//     //     svg.append('g')\n//     //         .attr('transform',`translate(${margin-2},0)`)\n//     //         .call(d3.axisLeft(yScale))\n\n//         return chartGroup;\n        \n//     },[props.data,svg]);\n\n//     useMemo(()=>{\n//         if(chartSelection !== undefined){\n//             const isBrushed = props.brushedState !== undefined;\n//             chartSelection.selectAll('.stack-rect')\n//                           .attr('opacity',isBrushed? 0.2:0.5);\n//             if(isBrushed){\n//                 chartSelection.select('#'+props.brushedState)\n//                     .attr('opacity',1);\n//             }\n//         }\n//     },[chartSelection,props.brushedState]);\n\n//     return (\n//         <div\n//             className={\"d3-component\"}\n//             style={{'height':'99%','width':'99%'}}\n//             ref={d3Container}\n//         ></div>\n//     );\n// }\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,OAAO,QAAO,OAAO;AACvD,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzB,eAAe,SAASC,YAAYA,CAACC,KAAK,EAAC;EAAAC,EAAA;EACvC;EACA,MAAMC,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAACU,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,CAAC,GAAGX,YAAY,CAACO,WAAW,CAAC;EAC5D;;EAEA,MAAMK,cAAc,GAAGb,OAAO,CAAC,MAAI;IAC/B,IAAGS,GAAG,KAAKK,SAAS,GAAGR,KAAK,CAACS,IAAI,KAAKD,SAAS,EAAC;MAAE;IAAO;EAE7D,CAAC,CAAC;EAEFE,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEX,KAAK,CAAC;EAE3B,oBACIF,OAAA;IACIc,SAAS,EAAE,cAAe;IAC1BC,KAAK,EAAE;MAAC,QAAQ,EAAC,KAAK;MAAC,OAAO,EAAC;IAAK,CAAE;IACtCC,GAAG,EAAEZ;EAAY;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAjB,EAAA,CA1TwBF,YAAY;EAAA,QAGGJ,YAAY;AAAA;AAAAwB,EAAA,GAH3BpB,YAAY;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}