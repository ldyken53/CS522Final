{"ast":null,"code":"var _jsxFileName = \"/Users/kokofan/Documents/project/CS529HW1/src/WhiteHatStats.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WhiteHatStats(props) {\n  _s();\n  //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  //this automatically constructs an svg canvas the size of the parent container (height and width)\n  //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n  //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  // console.log(svg, height, width, tTip);\n\n  const margin = 50;\n  // const radius = 10;\n\n  //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. This other representation could be a histogram, a stacked bar chart, etc.\n  //this loop updates when the props.data changes or the window resizes\n  //we can edit it to also use props.brushedState if you want to use linking\n  const chartSelection = useMemo(() => {\n    //wait until the data loads\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n\n    //aggregate gun deaths by state\n    const data = props.data.states;\n\n    // Get min and max gun deaths by state \n    const countmap = d => d.count;\n    const stateCounts = Object.values(data).map(countmap);\n    const [stateMin, stateMax] = d3.extent(stateCounts);\n\n    //get data for each state\n    const plotData = [];\n    for (let state of data) {\n      let entry = {\n        'ab': state.abreviation,\n        'name': state.state,\n        'population': state.population,\n        'count': state.count,\n        'male': state.male_count,\n        'female': state.count - state.male_count\n      };\n      plotData.push(entry);\n    }\n\n    // get abreviations (for x axis)\n    var groups = d3.map(data, function (d) {\n      return d.abreviation;\n    });\n\n    // set x axis\n    var xScale = d3.scaleBand().domain(groups).range([0, width - margin]).padding([0.3]);\n\n    // position of x axis\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + margin + \", \" + (height - margin) + \")\").call(d3.axisBottom(xScale).tickSizeOuter(0));\n\n    // set y axis\n    let yScale = d3.scaleLinear().domain([stateMax, 0]).range([margin, height - margin]);\n\n    // position of y axis\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\").call(d3.axisLeft(yScale));\n    var barkeys = ['male', 'female'];\n\n    // color map\n    var color = d3.scaleOrdinal().domain(barkeys).range(['#08519c', '#a3baff']);\n\n    // create stack data\n    var stackedData = d3.stack().keys(barkeys)(plotData);\n\n    // draw stack chart\n    let chartGroup = svg.append(\"g\").attr('class', 'stack').attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\");\n    chartGroup.selectAll(\"g\").data(stackedData).enter().append(\"g\").attr(\"fill\", function (d) {\n      return color(d.key);\n    }).selectAll(\"rect\").data(function (d) {\n      return d;\n    }).enter().append(\"rect\").attr('class', 'stack-rect').attr(\"x\", function (d) {\n      return xScale(d.data.ab);\n    }).attr(\"y\", function (d) {\n      return yScale(d[1]);\n    }).attr(\"height\", function (d) {\n      return yScale(d[0]) - yScale(d[1]);\n    }).attr(\"width\", xScale.bandwidth()).on('mouseover', (e, d) => {\n      var catName;\n      if (d[0] == 0) {\n        catName = 'Male-Deaths: ' + d.data.male;\n      } else {\n        catName = 'Female-Deaths: ' + d.data.female;\n      }\n      let string = d.data.name + '</br>' + catName + '</br>' + 'Total-Deatchs: ' + d.data.count + '</br>' + 'Population: ' + d.data.population;\n      props.ToolTip.moveTTipEvent(tTip, e);\n      tTip.html(string);\n    }).on('mousemove', e => {\n      props.ToolTip.moveTTipEvent(tTip, e);\n    }).on('mouseout', (e, d) => {\n      props.ToolTip.hideTTip(tTip);\n    });\n\n    // legends group\n    var legend = svg.append('g').attr('class', 'legend').attr('transform', 'translate(' + (width - 3 * margin) + \", \" + margin + ')');\n\n    // draw legends\n    legend.selectAll('rect').data(barkeys).enter().append('rect').attr('x', 0).attr('y', function (d, i) {\n      return i * 18;\n    }).attr('width', 12).attr('height', 12).attr('fill', function (d, i) {\n      return color(i);\n    });\n\n    // names of legends\n    legend.selectAll('text').data(barkeys).enter().append('text').text(function (d) {\n      return d[0].toUpperCase() + d.slice(1) + \"-Deaths\";\n    }).attr('x', 18).attr('y', function (d, i) {\n      return i * 18;\n    }).attr('text-anchor', 'start').attr('alignment-baseline', 'hanging');\n\n    // lable of x axis\n    svg.append(\"text\").attr(\"class\", \"x-label\").attr(\"x\", width / 2).attr(\"y\", height - margin / 4).attr(\"text-anchor\", \"middle\").text(\"State (abreviation)\");\n\n    // lable of y axis\n    svg.append(\"text\").attr(\"class\", \"y-label\").attr(\"text-anchor\", \"middle\").attr(\"x\", -height / 2).attr(\"y\", 0).attr(\"dy\", \".75em\").attr(\"transform\", \"rotate(-90)\").text(\"Gun deaths per State\");\n\n    // svg.selectAll('.rect').remove();\n    // svg.selectAll('.rect').data(data)\n    //    .enter().append('rect')\n    //    .attr('x', (d,i) => xScale(i))\n    //    .attr('width', width/data.length)\n    //    .attr('height', d => {\n    //         // return y(d[0])-y(d[1])\n    //     })\n\n    // .attr('y', d => y(d[1]))\n    // .attr('fill', d => d.key == 'Births' ? 'lightBlue' : 'orange')\n    // .attr('opacity', .5)\n    // .attr('stroke', 'red')\n    // .attr('stroke-width', 1)\n    //get data for each state\n    //     const plotData = [];\n    //     for(let state of data){\n    //         const dd = drawingDifficulty[state.abreviation];\n    //         let entry = {\n    //             'count': state.count,\n    //             'name': state.state,\n    //             'easeOfDrawing': dd === undefined? 5: dd,\n    //             'genderRatio': state.male_count/state.count,\n    //         }\n    //         plotData.push(entry)\n    //     }\n\n    //     //get transforms for each value into x and y coordinates\n    //     let xScale = d3.scaleLinear()\n    //         .domain(d3.extent(plotData,d=>d.easeOfDrawing))\n    //         .range([margin+radius,width-margin-radius]);\n    //     let yScale = d3.scaleLinear()\n    //         .domain(d3.extent(plotData,d=>d.count))\n    //         .range([height-margin-radius,margin+radius]);\n\n    //     //draw a line showing the mean values across the curve\n    //     //this probably isn't actually regression\n    //     const regressionLine = [];\n    //     for(let i = 0; i <= 10; i+= 1){\n    //         let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n    //         let meanY = 0;\n    //         if(pvals.length > 0){\n    //             for(let entry of pvals){\n    //                 meanY += entry.count/pvals.length\n    //             }\n    //         }\n    //         let point = [xScale(i),yScale(meanY)]\n    //         regressionLine.push(point)\n    //     }\n\n    //     //scale color by gender ratio for no reason\n    //     let colorScale = d3.scaleDiverging()\n    //         .domain([0,.5,1])\n    //         .range(['magenta','white','navy']);\n\n    //     //draw the circles for each state\n    //     svg.selectAll('.dot').remove();\n    //     svg.selectAll('.dot').data(plotData)\n    //         .enter().append('circle')\n    //         .attr('cy',d=> yScale(d.count))\n    //         .attr('cx',d=>xScale(d.easeOfDrawing))\n    //         .attr('fill',d=> colorScale(d.genderRatio))\n    //         .attr('r',10)\n    //         .on('mouseover',(e,d)=>{\n    //             let string = d.name + '</br>'\n    //                 + 'Gun Deaths: ' + d.count + '</br>'\n    //                 + 'Difficulty Drawing: ' + d.easeOfDrawing;\n    //             props.ToolTip.moveTTipEvent(tTip,e)\n    //             tTip.html(string)\n    //         }).on('mousemove',(e)=>{\n    //             props.ToolTip.moveTTipEvent(tTip,e);\n    //         }).on('mouseout',(e,d)=>{\n    //             props.ToolTip.hideTTip(tTip);\n    //         });\n\n    //     //draw the line\n    //     svg.selectAll('.regressionLine').remove();\n    //     svg.append('path').attr('class','regressionLine')\n    //         .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\n    //         .attr('stroke-width',5)\n    //         .attr('stroke','black')\n    //         .attr('fill','none');\n\n    // change the title\n    const labelSize = margin / 2;\n    svg.append('text').attr('x', width / 2).attr('y', labelSize).attr('text-anchor', 'middle').attr('font-size', labelSize).attr('font-weight', 'bold').text('Gun Deaths by State');\n\n    //     //change the disclaimer here\n    //     svg.append('text')\n    //         .attr('x',width-20)\n    //         .attr('y',height/3)\n    //         .attr('text-anchor','end')\n    //         .attr('font-size',10)\n    //         .text(\"I'm just asking questions\");\n\n    //     //draw basic axes using the x and y scales\n    //     svg.selectAll('g').remove()\n    //     svg.append('g')\n    //         .attr('transform',`translate(0,${height-margin+1})`)\n    //         .call(d3.axisBottom(xScale))\n\n    //     svg.append('g')\n    //         .attr('transform',`translate(${margin-2},0)`)\n    //         .call(d3.axisLeft(yScale))\n\n    return chartGroup;\n  }, [props.data, svg]);\n  useMemo(() => {\n    console.log(\"chartSelection\", chartSelection);\n    if (chartSelection !== undefined) {\n      const isBrushed = props.brushedState !== undefined;\n      chartSelection.selectAll('.stack-rect').attr('opacity', isBrushed ? .4 : .8).attr('strokeWidth', isBrushed ? 1 : 2);\n      if (isBrushed) {\n        console.log(\"isBrushed \", isBrushed);\n        chartSelection.select('#' + props.brushedState).attr('opacity', 1).attr('strokeWidth', 3);\n      }\n    }\n  }, [chartSelection, props.brushedState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 9\n  }, this);\n}\n//END of TODO #1.\n\n// const drawingDifficulty = {\n//     'IL': 9,\n//     'AL': 2,\n//     'AK': 1,\n//     'AR': 3,\n//     'CA': 9.51,\n//     'CO': 0,\n//     'DE': 3.1,\n//     'DC': 1.3,\n//     'FL': 8.9,\n//     'GA': 3.9,\n//     'HI': 4.5,\n//     'ID': 4,\n//     'IN': 4.3,\n//     'IA': 4.1,\n//     'KS': 1.6,\n//     'KY': 7,\n//     'LA': 6.5,\n//     'MN': 2.1,\n//     'MO': 5.5,\n//     'ME': 7.44,\n//     'MD': 10,\n//     'MA': 6.8,\n//     'MI': 9.7,\n//     'MN': 5.1,\n//     'MS': 3.8,\n//     'MT': 1.4,\n//     'NE': 1.9,\n//     'NV': .5,\n//     'NH': 3.7,\n//     'NJ': 9.1,\n//     'NM': .2,\n//     'NY': 8.7,\n//     'NC': 8.5,\n//     'ND': 2.3,\n//     'OH': 5.8,\n//     'OK': 6.05,\n//     'OR': 4.7,\n//     'PA': 4.01,\n//     'RI': 8.4,\n//     'SC': 7.1,\n//     'SD': .9,\n//     'TN': 3.333333,\n//     'TX': 8.1,\n//     'UT': 2.8,\n//     'VT': 2.6,\n//     'VA': 8.2,\n//     'WA': 9.2,\n//     'WV': 7.9,\n//     'WY': 0,\n// }\n_s(WhiteHatStats, \"BocckRK2OuYpJ6EOlD9BR2EeO44=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = WhiteHatStats;\nvar _c;\n$RefreshReg$(_c, \"WhiteHatStats\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","WhiteHatStats","props","_s","d3Container","svg","height","width","tTip","margin","chartSelection","undefined","data","states","countmap","d","count","stateCounts","Object","values","map","stateMin","stateMax","extent","plotData","state","entry","abreviation","population","male_count","push","groups","xScale","scaleBand","domain","range","padding","append","attr","call","axisBottom","tickSizeOuter","yScale","scaleLinear","axisLeft","barkeys","color","scaleOrdinal","stackedData","stack","keys","chartGroup","selectAll","enter","key","ab","bandwidth","on","e","catName","male","female","string","name","ToolTip","moveTTipEvent","html","hideTTip","legend","i","text","toUpperCase","slice","labelSize","console","log","isBrushed","brushedState","select","className","style","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kokofan/Documents/project/CS529HW1/src/WhiteHatStats.js"],"sourcesContent":["import React, {useEffect, useRef,useMemo} from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nexport default function WhiteHatStats(props){\n    //this is a generic component for plotting a d3 plot\n    const d3Container = useRef(null);\n    //this automatically constructs an svg canvas the size of the parent container (height and width)\n    //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n    //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n    // console.log(svg, height, width, tTip);\n\n    const margin = 50;\n    // const radius = 10;\n\n\n    //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. This other representation could be a histogram, a stacked bar chart, etc.\n    //this loop updates when the props.data changes or the window resizes\n    //we can edit it to also use props.brushedState if you want to use linking\n    const chartSelection = useMemo(()=>{\n        //wait until the data loads\n        if(svg === undefined | props.data === undefined){ return }\n\n        //aggregate gun deaths by state\n        const data = props.data.states;\n\n        // Get min and max gun deaths by state \n        const countmap = d => d.count;\n        const stateCounts = Object.values(data).map(countmap);\n        const [stateMin,stateMax] = d3.extent(stateCounts);\n\n        //get data for each state\n        const plotData = [];\n        for(let state of data){\n            let entry = {\n                'ab': state.abreviation,\n                'name': state.state,\n                'population': state.population,\n                'count': state.count,\n                'male': state.male_count,\n                'female': (state.count - state.male_count),\n            }\n            plotData.push(entry)\n        }\n\n        // get abreviations (for x axis)\n        var groups = d3.map(data, function(d){return(d.abreviation)})\n\n        // set x axis\n        var xScale = d3.scaleBand()\n                  .domain(groups)\n                  .range([0, width - margin])\n                  .padding([0.3])\n        \n        // position of x axis\n        svg.append(\"g\")\n           .attr(\"transform\", \"translate(\" + margin + \", \" + (height - margin) + \")\")\n           .call(d3.axisBottom(xScale).tickSizeOuter(0));\n\n        // set y axis\n        let yScale = d3.scaleLinear()\n                       .domain([stateMax, 0])\n                       .range([margin, height - margin]);\n        \n        // position of y axis\n        svg.append(\"g\")\n           .attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\")\n           .call(d3.axisLeft(yScale));\n\n        var barkeys = ['male', 'female'];\n\n        // color map\n        var color = d3.scaleOrdinal()\n                      .domain(barkeys)\n                      .range(['#08519c','#a3baff'])\n\n        // create stack data\n        var stackedData = d3.stack()\n                            .keys(barkeys)\n                            (plotData)\n\n        // draw stack chart\n        let chartGroup = svg.append(\"g\")\n                            .attr('class','stack')\n                            .attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\");\n        \n        chartGroup.selectAll(\"g\")\n           .data(stackedData)\n           .enter().append(\"g\")\n           .attr(\"fill\", function(d) { return color(d.key); })\n           .selectAll(\"rect\")\n           .data(function(d) { return d; })\n           .enter().append(\"rect\")\n           .attr('class','stack-rect')\n           .attr(\"x\", function(d) { return xScale(d.data.ab); })\n           .attr(\"y\", function(d) { return yScale(d[1]); })\n           .attr(\"height\", function(d) { return yScale(d[0]) - yScale(d[1]); })\n           .attr(\"width\", xScale.bandwidth())\n           .on('mouseover',(e,d)=>{\n                var catName;\n                if (d[0] == 0) { catName = 'Male-Deaths: ' + d.data.male; }\n                else { catName = 'Female-Deaths: ' + d.data.female;}\n                let string = d.data.name + '</br>'\n                    + catName + '</br>'\n                    + 'Total-Deatchs: ' + d.data.count + '</br>'\n                    + 'Population: ' + d.data.population;\n                props.ToolTip.moveTTipEvent(tTip,e)\n                tTip.html(string)\n            }).on('mousemove',(e)=>{\n                props.ToolTip.moveTTipEvent(tTip,e);\n            }).on('mouseout',(e,d)=>{\n                props.ToolTip.hideTTip(tTip);\n            });\n\n        // legends group\n        var legend = svg.append('g')\n            .attr('class', 'legend')\n            .attr('transform', 'translate(' + (width - 3*margin) + \", \" + margin + ')' );\n\n        // draw legends\n        legend.selectAll('rect')\n              .data(barkeys)\n              .enter()\n              .append('rect')\n              .attr('x', 0)\n              .attr('y', function(d, i){ return i * 18; })\n              .attr('width', 12)\n              .attr('height', 12)\n              .attr('fill', function(d, i){\n                  return color(i);\n              });\n\n        // names of legends\n        legend.selectAll('text')\n              .data(barkeys)\n              .enter()\n              .append('text')\n              .text(function(d){ return d[0].toUpperCase() + d.slice(1) + \"-Deaths\"; })\n              .attr('x', 18)\n              .attr('y', function(d, i){ return i * 18;})\n              .attr('text-anchor', 'start')\n              .attr('alignment-baseline', 'hanging');\n\n        // lable of x axis\n        svg.append(\"text\")\n           .attr(\"class\", \"x-label\")\n           .attr(\"x\", width/2)\n           .attr(\"y\", height - margin/4)\n           .attr(\"text-anchor\", \"middle\")\n           .text(\"State (abreviation)\")\n\n        // lable of y axis\n        svg.append(\"text\")\n           .attr(\"class\", \"y-label\")\n           .attr(\"text-anchor\", \"middle\")\n           .attr(\"x\", -height/2)\n           .attr(\"y\", 0)\n           .attr(\"dy\", \".75em\")\n           .attr(\"transform\", \"rotate(-90)\")\n           .text(\"Gun deaths per State\");\n\n\n        // svg.selectAll('.rect').remove();\n        // svg.selectAll('.rect').data(data)\n        //    .enter().append('rect')\n        //    .attr('x', (d,i) => xScale(i))\n        //    .attr('width', width/data.length)\n        //    .attr('height', d => {\n        //         // return y(d[0])-y(d[1])\n        //     })\n\n           // .attr('y', d => y(d[1]))\n           // .attr('fill', d => d.key == 'Births' ? 'lightBlue' : 'orange')\n           // .attr('opacity', .5)\n           // .attr('stroke', 'red')\n           // .attr('stroke-width', 1)\n        //get data for each state\n    //     const plotData = [];\n    //     for(let state of data){\n    //         const dd = drawingDifficulty[state.abreviation];\n    //         let entry = {\n    //             'count': state.count,\n    //             'name': state.state,\n    //             'easeOfDrawing': dd === undefined? 5: dd,\n    //             'genderRatio': state.male_count/state.count,\n    //         }\n    //         plotData.push(entry)\n    //     }\n\n    //     //get transforms for each value into x and y coordinates\n    //     let xScale = d3.scaleLinear()\n    //         .domain(d3.extent(plotData,d=>d.easeOfDrawing))\n    //         .range([margin+radius,width-margin-radius]);\n    //     let yScale = d3.scaleLinear()\n    //         .domain(d3.extent(plotData,d=>d.count))\n    //         .range([height-margin-radius,margin+radius]);\n\n\n    //     //draw a line showing the mean values across the curve\n    //     //this probably isn't actually regression\n    //     const regressionLine = [];\n    //     for(let i = 0; i <= 10; i+= 1){\n    //         let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n    //         let meanY = 0;\n    //         if(pvals.length > 0){\n    //             for(let entry of pvals){\n    //                 meanY += entry.count/pvals.length\n    //             }\n    //         }\n    //         let point = [xScale(i),yScale(meanY)]\n    //         regressionLine.push(point)\n    //     }\n        \n    //     //scale color by gender ratio for no reason\n    //     let colorScale = d3.scaleDiverging()\n    //         .domain([0,.5,1])\n    //         .range(['magenta','white','navy']);\n\n    //     //draw the circles for each state\n    //     svg.selectAll('.dot').remove();\n    //     svg.selectAll('.dot').data(plotData)\n    //         .enter().append('circle')\n    //         .attr('cy',d=> yScale(d.count))\n    //         .attr('cx',d=>xScale(d.easeOfDrawing))\n    //         .attr('fill',d=> colorScale(d.genderRatio))\n    //         .attr('r',10)\n    //         .on('mouseover',(e,d)=>{\n    //             let string = d.name + '</br>'\n    //                 + 'Gun Deaths: ' + d.count + '</br>'\n    //                 + 'Difficulty Drawing: ' + d.easeOfDrawing;\n    //             props.ToolTip.moveTTipEvent(tTip,e)\n    //             tTip.html(string)\n    //         }).on('mousemove',(e)=>{\n    //             props.ToolTip.moveTTipEvent(tTip,e);\n    //         }).on('mouseout',(e,d)=>{\n    //             props.ToolTip.hideTTip(tTip);\n    //         });\n           \n    //     //draw the line\n    //     svg.selectAll('.regressionLine').remove();\n    //     svg.append('path').attr('class','regressionLine')\n    //         .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\n    //         .attr('stroke-width',5)\n    //         .attr('stroke','black')\n    //         .attr('fill','none');\n\n        // change the title\n        const labelSize = margin/2;\n        svg.append('text')\n            .attr('x',width/2)\n            .attr('y',labelSize)\n            .attr('text-anchor','middle')\n            .attr('font-size',labelSize)\n            .attr('font-weight','bold')\n            .text('Gun Deaths by State');\n\n    //     //change the disclaimer here\n    //     svg.append('text')\n    //         .attr('x',width-20)\n    //         .attr('y',height/3)\n    //         .attr('text-anchor','end')\n    //         .attr('font-size',10)\n    //         .text(\"I'm just asking questions\");\n\n    //     //draw basic axes using the x and y scales\n    //     svg.selectAll('g').remove()\n    //     svg.append('g')\n    //         .attr('transform',`translate(0,${height-margin+1})`)\n    //         .call(d3.axisBottom(xScale))\n\n    //     svg.append('g')\n    //         .attr('transform',`translate(${margin-2},0)`)\n    //         .call(d3.axisLeft(yScale))\n\n        return chartGroup;\n        \n    },[props.data,svg]);\n\n    useMemo(()=>{\n        console.log(\"chartSelection\", chartSelection);\n        if(chartSelection !== undefined){\n        const isBrushed = props.brushedState !== undefined;\n        chartSelection.selectAll('.stack-rect')\n                      .attr('opacity',isBrushed? .4:.8)\n                      .attr('strokeWidth',isBrushed? 1:2);\n        if(isBrushed){\n            console.log(\"isBrushed \", isBrushed);\n            chartSelection.select('#'+props.brushedState)\n                .attr('opacity',1)\n                .attr('strokeWidth',3);\n            }\n        }\n    },[chartSelection,props.brushedState]);\n\n    return (\n        <div\n            className={\"d3-component\"}\n            style={{'height':'99%','width':'99%'}}\n            ref={d3Container}\n        ></div>\n    );\n}\n//END of TODO #1.\n\n \n// const drawingDifficulty = {\n//     'IL': 9,\n//     'AL': 2,\n//     'AK': 1,\n//     'AR': 3,\n//     'CA': 9.51,\n//     'CO': 0,\n//     'DE': 3.1,\n//     'DC': 1.3,\n//     'FL': 8.9,\n//     'GA': 3.9,\n//     'HI': 4.5,\n//     'ID': 4,\n//     'IN': 4.3,\n//     'IA': 4.1,\n//     'KS': 1.6,\n//     'KY': 7,\n//     'LA': 6.5,\n//     'MN': 2.1,\n//     'MO': 5.5,\n//     'ME': 7.44,\n//     'MD': 10,\n//     'MA': 6.8,\n//     'MI': 9.7,\n//     'MN': 5.1,\n//     'MS': 3.8,\n//     'MT': 1.4,\n//     'NE': 1.9,\n//     'NV': .5,\n//     'NH': 3.7,\n//     'NJ': 9.1,\n//     'NM': .2,\n//     'NY': 8.7,\n//     'NC': 8.5,\n//     'ND': 2.3,\n//     'OH': 5.8,\n//     'OK': 6.05,\n//     'OR': 4.7,\n//     'PA': 4.01,\n//     'RI': 8.4,\n//     'SC': 7.1,\n//     'SD': .9,\n//     'TN': 3.333333,\n//     'TX': 8.1,\n//     'UT': 2.8,\n//     'VT': 2.6,\n//     'VA': 8.2,\n//     'WA': 9.2,\n//     'WV': 7.9,\n//     'WY': 0,\n// }\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAACC,OAAO,QAAO,OAAO;AACtD,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAO,KAAKC,EAAE,MAAM,IAAI;;AAExB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,aAAaA,CAACC,KAAK,EAAC;EAAAC,EAAA;EACxC;EACA,MAAMC,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC;EACA;EACA;EACA,MAAM,CAACU,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,CAAC,GAAGX,YAAY,CAACO,WAAW,CAAC;EAC5D;;EAEA,MAAMK,MAAM,GAAG,EAAE;EACjB;;EAGA;EACA;EACA;EACA,MAAMC,cAAc,GAAGd,OAAO,CAAC,MAAI;IAC/B;IACA,IAAGS,GAAG,KAAKM,SAAS,GAAGT,KAAK,CAACU,IAAI,KAAKD,SAAS,EAAC;MAAE;IAAO;;IAEzD;IACA,MAAMC,IAAI,GAAGV,KAAK,CAACU,IAAI,CAACC,MAAM;;IAE9B;IACA,MAAMC,QAAQ,GAAGC,CAAC,IAAIA,CAAC,CAACC,KAAK;IAC7B,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACP,IAAI,CAAC,CAACQ,GAAG,CAACN,QAAQ,CAAC;IACrD,MAAM,CAACO,QAAQ,EAACC,QAAQ,CAAC,GAAGxB,EAAE,CAACyB,MAAM,CAACN,WAAW,CAAC;;IAElD;IACA,MAAMO,QAAQ,GAAG,EAAE;IACnB,KAAI,IAAIC,KAAK,IAAIb,IAAI,EAAC;MAClB,IAAIc,KAAK,GAAG;QACR,IAAI,EAAED,KAAK,CAACE,WAAW;QACvB,MAAM,EAAEF,KAAK,CAACA,KAAK;QACnB,YAAY,EAAEA,KAAK,CAACG,UAAU;QAC9B,OAAO,EAAEH,KAAK,CAACT,KAAK;QACpB,MAAM,EAAES,KAAK,CAACI,UAAU;QACxB,QAAQ,EAAGJ,KAAK,CAACT,KAAK,GAAGS,KAAK,CAACI;MACnC,CAAC;MACDL,QAAQ,CAACM,IAAI,CAACJ,KAAK,CAAC;IACxB;;IAEA;IACA,IAAIK,MAAM,GAAGjC,EAAE,CAACsB,GAAG,CAACR,IAAI,EAAE,UAASG,CAAC,EAAC;MAAC,OAAOA,CAAC,CAACY,WAAW;IAAC,CAAC,CAAC;;IAE7D;IACA,IAAIK,MAAM,GAAGlC,EAAE,CAACmC,SAAS,CAAC,CAAC,CAChBC,MAAM,CAACH,MAAM,CAAC,CACdI,KAAK,CAAC,CAAC,CAAC,EAAE5B,KAAK,GAAGE,MAAM,CAAC,CAAC,CAC1B2B,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;;IAEzB;IACA/B,GAAG,CAACgC,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC,WAAW,EAAE,YAAY,GAAG7B,MAAM,GAAG,IAAI,IAAIH,MAAM,GAAGG,MAAM,CAAC,GAAG,GAAG,CAAC,CACzE8B,IAAI,CAACzC,EAAE,CAAC0C,UAAU,CAACR,MAAM,CAAC,CAACS,aAAa,CAAC,CAAC,CAAC,CAAC;;IAEhD;IACA,IAAIC,MAAM,GAAG5C,EAAE,CAAC6C,WAAW,CAAC,CAAC,CACbT,MAAM,CAAC,CAACZ,QAAQ,EAAE,CAAC,CAAC,CAAC,CACrBa,KAAK,CAAC,CAAC1B,MAAM,EAAEH,MAAM,GAAGG,MAAM,CAAC,CAAC;;IAEhD;IACAJ,GAAG,CAACgC,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC,WAAW,EAAE,YAAY,GAAG7B,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,CACzD8B,IAAI,CAACzC,EAAE,CAAC8C,QAAQ,CAACF,MAAM,CAAC,CAAC;IAE7B,IAAIG,OAAO,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;;IAEhC;IACA,IAAIC,KAAK,GAAGhD,EAAE,CAACiD,YAAY,CAAC,CAAC,CACdb,MAAM,CAACW,OAAO,CAAC,CACfV,KAAK,CAAC,CAAC,SAAS,EAAC,SAAS,CAAC,CAAC;;IAE3C;IACA,IAAIa,WAAW,GAAGlD,EAAE,CAACmD,KAAK,CAAC,CAAC,CACPC,IAAI,CAACL,OAAO,CAAC,CACbrB,QAAQ,CAAC;;IAE9B;IACA,IAAI2B,UAAU,GAAG9C,GAAG,CAACgC,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC,OAAO,EAAC,OAAO,CAAC,CACrBA,IAAI,CAAC,WAAW,EAAE,YAAY,GAAG7B,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;IAE9E0C,UAAU,CAACC,SAAS,CAAC,GAAG,CAAC,CACrBxC,IAAI,CAACoC,WAAW,CAAC,CACjBK,KAAK,CAAC,CAAC,CAAChB,MAAM,CAAC,GAAG,CAAC,CACnBC,IAAI,CAAC,MAAM,EAAE,UAASvB,CAAC,EAAE;MAAE,OAAO+B,KAAK,CAAC/B,CAAC,CAACuC,GAAG,CAAC;IAAE,CAAC,CAAC,CAClDF,SAAS,CAAC,MAAM,CAAC,CACjBxC,IAAI,CAAC,UAASG,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAE,CAAC,CAAC,CAC/BsC,KAAK,CAAC,CAAC,CAAChB,MAAM,CAAC,MAAM,CAAC,CACtBC,IAAI,CAAC,OAAO,EAAC,YAAY,CAAC,CAC1BA,IAAI,CAAC,GAAG,EAAE,UAASvB,CAAC,EAAE;MAAE,OAAOiB,MAAM,CAACjB,CAAC,CAACH,IAAI,CAAC2C,EAAE,CAAC;IAAE,CAAC,CAAC,CACpDjB,IAAI,CAAC,GAAG,EAAE,UAASvB,CAAC,EAAE;MAAE,OAAO2B,MAAM,CAAC3B,CAAC,CAAC,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CAC/CuB,IAAI,CAAC,QAAQ,EAAE,UAASvB,CAAC,EAAE;MAAE,OAAO2B,MAAM,CAAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG2B,MAAM,CAAC3B,CAAC,CAAC,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CACnEuB,IAAI,CAAC,OAAO,EAAEN,MAAM,CAACwB,SAAS,CAAC,CAAC,CAAC,CACjCC,EAAE,CAAC,WAAW,EAAC,CAACC,CAAC,EAAC3C,CAAC,KAAG;MAClB,IAAI4C,OAAO;MACX,IAAI5C,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;QAAE4C,OAAO,GAAG,eAAe,GAAG5C,CAAC,CAACH,IAAI,CAACgD,IAAI;MAAE,CAAC,MACtD;QAAED,OAAO,GAAG,iBAAiB,GAAG5C,CAAC,CAACH,IAAI,CAACiD,MAAM;MAAC;MACnD,IAAIC,MAAM,GAAG/C,CAAC,CAACH,IAAI,CAACmD,IAAI,GAAG,OAAO,GAC5BJ,OAAO,GAAG,OAAO,GACjB,iBAAiB,GAAG5C,CAAC,CAACH,IAAI,CAACI,KAAK,GAAG,OAAO,GAC1C,cAAc,GAAGD,CAAC,CAACH,IAAI,CAACgB,UAAU;MACxC1B,KAAK,CAAC8D,OAAO,CAACC,aAAa,CAACzD,IAAI,EAACkD,CAAC,CAAC;MACnClD,IAAI,CAAC0D,IAAI,CAACJ,MAAM,CAAC;IACrB,CAAC,CAAC,CAACL,EAAE,CAAC,WAAW,EAAEC,CAAC,IAAG;MACnBxD,KAAK,CAAC8D,OAAO,CAACC,aAAa,CAACzD,IAAI,EAACkD,CAAC,CAAC;IACvC,CAAC,CAAC,CAACD,EAAE,CAAC,UAAU,EAAC,CAACC,CAAC,EAAC3C,CAAC,KAAG;MACpBb,KAAK,CAAC8D,OAAO,CAACG,QAAQ,CAAC3D,IAAI,CAAC;IAChC,CAAC,CAAC;;IAEN;IACA,IAAI4D,MAAM,GAAG/D,GAAG,CAACgC,MAAM,CAAC,GAAG,CAAC,CACvBC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CACvBA,IAAI,CAAC,WAAW,EAAE,YAAY,IAAI/B,KAAK,GAAG,CAAC,GAACE,MAAM,CAAC,GAAG,IAAI,GAAGA,MAAM,GAAG,GAAI,CAAC;;IAEhF;IACA2D,MAAM,CAAChB,SAAS,CAAC,MAAM,CAAC,CACjBxC,IAAI,CAACiC,OAAO,CAAC,CACbQ,KAAK,CAAC,CAAC,CACPhB,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,GAAG,EAAE,UAASvB,CAAC,EAAEsD,CAAC,EAAC;MAAE,OAAOA,CAAC,GAAG,EAAE;IAAE,CAAC,CAAC,CAC3C/B,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CACjBA,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAClBA,IAAI,CAAC,MAAM,EAAE,UAASvB,CAAC,EAAEsD,CAAC,EAAC;MACxB,OAAOvB,KAAK,CAACuB,CAAC,CAAC;IACnB,CAAC,CAAC;;IAER;IACAD,MAAM,CAAChB,SAAS,CAAC,MAAM,CAAC,CACjBxC,IAAI,CAACiC,OAAO,CAAC,CACbQ,KAAK,CAAC,CAAC,CACPhB,MAAM,CAAC,MAAM,CAAC,CACdiC,IAAI,CAAC,UAASvD,CAAC,EAAC;MAAE,OAAOA,CAAC,CAAC,CAAC,CAAC,CAACwD,WAAW,CAAC,CAAC,GAAGxD,CAAC,CAACyD,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS;IAAE,CAAC,CAAC,CACxElC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,GAAG,EAAE,UAASvB,CAAC,EAAEsD,CAAC,EAAC;MAAE,OAAOA,CAAC,GAAG,EAAE;IAAC,CAAC,CAAC,CAC1C/B,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,CAC5BA,IAAI,CAAC,oBAAoB,EAAE,SAAS,CAAC;;IAE5C;IACAjC,GAAG,CAACgC,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBA,IAAI,CAAC,GAAG,EAAE/B,KAAK,GAAC,CAAC,CAAC,CAClB+B,IAAI,CAAC,GAAG,EAAEhC,MAAM,GAAGG,MAAM,GAAC,CAAC,CAAC,CAC5B6B,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BgC,IAAI,CAAC,qBAAqB,CAAC;;IAE/B;IACAjE,GAAG,CAACgC,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,GAAG,EAAE,CAAChC,MAAM,GAAC,CAAC,CAAC,CACpBgC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CACnBA,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAChCgC,IAAI,CAAC,sBAAsB,CAAC;;IAGhC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEG;IACA;IACA;IACA;IACA;IACH;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEI;IACA,MAAMG,SAAS,GAAGhE,MAAM,GAAC,CAAC;IAC1BJ,GAAG,CAACgC,MAAM,CAAC,MAAM,CAAC,CACbC,IAAI,CAAC,GAAG,EAAC/B,KAAK,GAAC,CAAC,CAAC,CACjB+B,IAAI,CAAC,GAAG,EAACmC,SAAS,CAAC,CACnBnC,IAAI,CAAC,aAAa,EAAC,QAAQ,CAAC,CAC5BA,IAAI,CAAC,WAAW,EAACmC,SAAS,CAAC,CAC3BnC,IAAI,CAAC,aAAa,EAAC,MAAM,CAAC,CAC1BgC,IAAI,CAAC,qBAAqB,CAAC;;IAEpC;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEI,OAAOnB,UAAU;EAErB,CAAC,EAAC,CAACjD,KAAK,CAACU,IAAI,EAACP,GAAG,CAAC,CAAC;EAEnBT,OAAO,CAAC,MAAI;IACR8E,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEjE,cAAc,CAAC;IAC7C,IAAGA,cAAc,KAAKC,SAAS,EAAC;MAChC,MAAMiE,SAAS,GAAG1E,KAAK,CAAC2E,YAAY,KAAKlE,SAAS;MAClDD,cAAc,CAAC0C,SAAS,CAAC,aAAa,CAAC,CACxBd,IAAI,CAAC,SAAS,EAACsC,SAAS,GAAE,EAAE,GAAC,EAAE,CAAC,CAChCtC,IAAI,CAAC,aAAa,EAACsC,SAAS,GAAE,CAAC,GAAC,CAAC,CAAC;MACjD,IAAGA,SAAS,EAAC;QACTF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEC,SAAS,CAAC;QACpClE,cAAc,CAACoE,MAAM,CAAC,GAAG,GAAC5E,KAAK,CAAC2E,YAAY,CAAC,CACxCvC,IAAI,CAAC,SAAS,EAAC,CAAC,CAAC,CACjBA,IAAI,CAAC,aAAa,EAAC,CAAC,CAAC;MAC1B;IACJ;EACJ,CAAC,EAAC,CAAC5B,cAAc,EAACR,KAAK,CAAC2E,YAAY,CAAC,CAAC;EAEtC,oBACI7E,OAAA;IACI+E,SAAS,EAAE,cAAe;IAC1BC,KAAK,EAAE;MAAC,QAAQ,EAAC,KAAK;MAAC,OAAO,EAAC;IAAK,CAAE;IACtCC,GAAG,EAAE7E;EAAY;IAAA8E,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEf;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAlF,EAAA,CAhWwBF,aAAa;EAAA,QAMEJ,YAAY;AAAA;AAAAyF,EAAA,GAN3BrF,aAAa;AAAA,IAAAqF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}