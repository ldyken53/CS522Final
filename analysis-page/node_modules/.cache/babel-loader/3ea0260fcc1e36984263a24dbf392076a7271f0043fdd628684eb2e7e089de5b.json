{"ast":null,"code":"var _jsxFileName = \"/Users/kokofan/Documents/project/CS522_analysis/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport './App.css';\nimport Whitehat from './Whitehat';\nimport WhiteHatStats from './WhiteHatStats';\nimport Blackhat from './Blackhat';\nimport BlackHatStats from './BlackHatStats';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //state deciding if we are looking at the blackhat or whitehat visualization\n  const [viewToggle, setViewToggle] = useState('blackhat');\n\n  //state for the data, since it loads asynchronously\n  const [map, setMap] = useState();\n  const [gunData, setGunData] = useState();\n  const [cityData, setCityData] = useState();\n\n  //we put some states (brushing, zooming)\n  //at the top level and pass setZoomedState etc to the map\n  //so we can do brushing accross multiple components\n  const [zoomedState, setZoomedState] = useState();\n  const [selectedStuff, setSelectedStuff] = useState();\n  const [brushedState, setBrushedState] = useState();\n  // const [brushedRect,setBrushedRect] = useState();\n\n  //filter for the linked view in whitehat stats\n  const [sortKey, setSortKey] = useState('age');\n\n  //load map contours\n  //react looks into the '/public' folder by default\n  async function fetchMap() {\n    fetch('us-states.geojson').then(paths => {\n      paths.json().then(data => {\n        setMap(data);\n      });\n    });\n  }\n\n  //fetch gun data and attach a timestamp to make sorting dates easier for filters\n  async function fetchGunData() {\n    fetch('processed_gundeaths_data.json').then(d => {\n      d.json().then(gd => {\n        // console.log('gundata',gd)\n        setGunData(gd);\n      });\n    });\n  }\n  async function fetchCityData() {\n    fetch('us-cities-demographics.json').then(d => {\n      d.json().then(cd => {\n        // console.log('citydata',cd)\n        setCityData(cd);\n      });\n    });\n  }\n\n  //fetch data, called only once\n  useEffect(() => {\n    fetchMap();\n    fetchGunData();\n    fetchCityData();\n  }, []);\n\n  //called to draw the whitehat visualization\n  function makeWhiteHat() {\n    return (\n      /*#__PURE__*/\n      // <>\n      _jsxDEV(\"div\", {\n        style: {\n          'width': '20%',\n          'height': '100%',\n          'display': 'inline-block',\n          'background': 'grey'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: 'Menu'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n      // <div style={{'width':'80%','height':'100%','display':'inline-block', 'background': 'pink'}}>\n      // <h1>{'Menu'}</h1>\n      // </div>\n\n      // <div style={{'width':'80%','height':'50%','display':'inline-block'}}>\n      //   <div \n      //     style={{'height': '100%','width':'calc(80% - 15em)','display':'inline-block', 'background': 'pink'}}\n      //   >\n      //       <Whitehat\n      //         map={map}\n      //         data={gunData}\n      //         cityPop={cityData}\n      //         ToolTip={ToolTip}\n      //         zoomedState={zoomedState}\n      //         setSelectedStuff={setSelectedStuff}\n      //         setZoomedState={setZoomedState}\n      //         brushedState={brushedState}\n      //         setBrushedState={setBrushedState}\n      //         // brushedRect={brushedRect}\n      //         // setBrushedRect={setBrushedRect}\n      //       />\n      //   </div>\n      //   <div \n      //     className={'shadow'}\n      //     style={{'height': '100%','width':'14em','display':'inline-block','verticalAlign':'text-bottom'}}\n      //   >\n      //     <h1>{'Instructions'}</h1>\n      //     <p>{'Click on each state to zoom and unzoom'}</p>\n      //   </div>\n      // </div>\n      // <div style={{'height': '49%','width':'99%'}}>\n      //   <div className={'title'} \n      //     style={{'height':'2em','width':'100%','fontWeight':'bold','fontFamily':'Georgia'}}\n      //   >\n      //     {'Gun Deaths'}\n      //   </div>\n      //   <div style={{'height': 'calc(100% - 2em)','width': '50%','maxWidth': '60em','marginLeft':'25%'}}>\n      //     <WhiteHatStats\n      //       data={gunData}\n      //       ToolTip={ToolTip}\n      //       brushedState={brushedState}\n      //       setBrushedState={setBrushedState}\n      //       // brushedRect={brushedRect}\n      //       // setBrushedRect={setBrushedRect}\n      //       zoomedState={zoomedState}\n      //     />     \n      //   </div>   \n      // </div>\n      // </>\n    );\n  }\n\n  //function for a simpler chloropleth map\n  function makeBlackHat() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        'width': '20%',\n        'height': '100%',\n        'display': 'inline-block',\n        'background': 'grey'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: 'Menu'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)\n    // <>\n    //   <div style={{'width':'100%','height':'50%','display':'inline-block'}}>\n    //     <div \n    //       style={{'height': '100%','width':'calc(100% - 15em)','display':'inline-block'}}\n    //     >\n    //         <Blackhat\n    //           map={map}\n    //           data={gunData}\n    //           ToolTip={ToolTip}\n    //           zoomedState={zoomedState}\n    //           setSelectedStuff={setSelectedStuff}\n    //           setZoomedState={setZoomedState}\n    //           brushedState={brushedState}\n    //           setBrushedState={setBrushedState}\n    //         />\n    //     </div>\n    //     <div \n    //       className={'shadow'}\n    //       style={{'height': '100%','width':'14em','display':'inline-block','verticalAlign':'text-bottom'}}\n    //     >\n    //       <h1>{'Instructions'}</h1>\n    //       <p>{'Click on each state to zoom and unzoom'}</p>\n    //     </div>\n    //   </div>\n    //   <div style={{'height': '49%','width':'99%'}}>\n    //     <div className={'title'} \n    //       style={{'height':'2em','width':'100%','fontWeight':'bold','fontFamily':'Georgia'}}\n    //     >\n    //       {'Gun Deaths'}\n    //     </div>\n    //     <div style={{'height': 'calc(100% - 2em)','width': '50%','maxWidth': '60em','marginLeft':'25%'}}>\n    //       <BlackHatStats\n    //         data={gunData}\n    //         ToolTip={ToolTip}\n    //       />     \n    //     </div>   \n    //   </div>\n    // </>\n    ;\n  }\n\n  //toggle which visualization we're looking at based on the \"viewToggle\" state\n  const hat = () => {\n    if (viewToggle === 'whitehat') {\n      return makeWhiteHat();\n    } else {\n      return makeBlackHat();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'header',\n      style: {\n        'height': '2em',\n        'width': '100vw'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewToggle('whitehat'),\n        className: viewToggle === 'whitehat' ? 'inactiveButton' : 'activeButton',\n        children: \"White Hat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewToggle('blackhat'),\n        className: viewToggle === 'blackhat' ? 'inactiveButton' : 'activeButton',\n        children: \"Black Hat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'body',\n      style: {\n        'height': 'calc(100vh - 2.5em)',\n        'width': '100vw'\n      },\n      children: hat()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jRe7RxT78pGkd1ff/dZBwXX4d8E=\");\n_c = App;\nclass ToolTip {\n  static moveTTip(tTip, tipX, tipY) {\n    var tipBBox = tTip.node().getBoundingClientRect();\n    while (tipBBox.width + tipX > window.innerWidth) {\n      tipX = tipX - 10;\n    }\n    while (tipBBox.height + tipY > window.innerHeight) {\n      tipY = tipY - 10;\n    }\n    tTip.style('left', tipX + 'px').style('top', tipY + 'px').style('visibility', 'visible').style('z-index', 1000);\n  }\n  static moveTTipEvent(tTip, event) {\n    var tipX = event.pageX + 30;\n    var tipY = event.pageY - 20;\n    this.moveTTip(tTip, tipX, tipY);\n  }\n  static hideTTip(tTip) {\n    tTip.style('visibility', 'hidden');\n  }\n  static addTTipCanvas(tTip, className, width, height) {\n    tTip.selectAll('svg').selectAll('.' + className).remove();\n    let canvas = tTip.append('svg').attr('class', className).attr('height', height).attr('width', width).style('background', 'white');\n    return canvas;\n  }\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Whitehat","WhiteHatStats","Blackhat","BlackHatStats","d3","jsxDEV","_jsxDEV","App","_s","viewToggle","setViewToggle","map","setMap","gunData","setGunData","cityData","setCityData","zoomedState","setZoomedState","selectedStuff","setSelectedStuff","brushedState","setBrushedState","sortKey","setSortKey","fetchMap","fetch","then","paths","json","data","fetchGunData","d","gd","fetchCityData","cd","makeWhiteHat","style","children","fileName","_jsxFileName","lineNumber","columnNumber","makeBlackHat","hat","className","onClick","_c","ToolTip","moveTTip","tTip","tipX","tipY","tipBBox","node","getBoundingClientRect","width","window","innerWidth","height","innerHeight","moveTTipEvent","event","pageX","pageY","hideTTip","addTTipCanvas","selectAll","remove","canvas","append","attr","$RefreshReg$"],"sources":["/Users/kokofan/Documents/project/CS522_analysis/src/App.js"],"sourcesContent":["import React, {useState,useEffect, useMemo} from 'react';\nimport './App.css';\nimport Whitehat from './Whitehat';\nimport WhiteHatStats from './WhiteHatStats'\nimport Blackhat from './Blackhat';\nimport BlackHatStats from './BlackHatStats';\nimport * as d3 from 'd3';\n\n\nfunction App() {\n\n  //state deciding if we are looking at the blackhat or whitehat visualization\n  const [viewToggle, setViewToggle] = useState('blackhat');\n\n  //state for the data, since it loads asynchronously\n  const [map, setMap] = useState();\n  const [gunData, setGunData] = useState();\n  const [cityData, setCityData] = useState();\n\n  //we put some states (brushing, zooming)\n  //at the top level and pass setZoomedState etc to the map\n  //so we can do brushing accross multiple components\n  const [zoomedState,setZoomedState] = useState();\n  const [selectedStuff,setSelectedStuff] = useState();\n  const [brushedState,setBrushedState] = useState();\n  // const [brushedRect,setBrushedRect] = useState();\n\n  //filter for the linked view in whitehat stats\n  const [sortKey,setSortKey] = useState('age');\n\n  //load map contours\n  //react looks into the '/public' folder by default\n  async function fetchMap(){\n    fetch('us-states.geojson').then(paths=>{\n      paths.json().then(data=>{\n        setMap(data);\n      })\n    })\n  }\n\n  //fetch gun data and attach a timestamp to make sorting dates easier for filters\n  async function fetchGunData(){\n    fetch('processed_gundeaths_data.json').then(d => {\n      d.json().then(gd=>{\n        // console.log('gundata',gd)\n        setGunData(gd);\n      })\n    })\n  }\n\n  async function fetchCityData(){\n    fetch('us-cities-demographics.json').then(d => {\n      d.json().then(cd=>{\n        // console.log('citydata',cd)\n        setCityData(cd);\n      })\n    })\n  }\n\n\n  //fetch data, called only once\n  useEffect(()=>{\n    fetchMap();\n    fetchGunData();\n    fetchCityData();\n  },[])\n\n \n  //called to draw the whitehat visualization\n  function makeWhiteHat(){\n    \n        return (\n          // <>\n            <div style={{'width':'20%','height':'100%','display':'inline-block', 'background': 'grey'}}>\n            <h1>{'Menu'}</h1>\n            </div>\n            // <div style={{'width':'80%','height':'100%','display':'inline-block', 'background': 'pink'}}>\n            // <h1>{'Menu'}</h1>\n            // </div>\n\n            // <div style={{'width':'80%','height':'50%','display':'inline-block'}}>\n            //   <div \n            //     style={{'height': '100%','width':'calc(80% - 15em)','display':'inline-block', 'background': 'pink'}}\n            //   >\n            //       <Whitehat\n            //         map={map}\n            //         data={gunData}\n            //         cityPop={cityData}\n            //         ToolTip={ToolTip}\n            //         zoomedState={zoomedState}\n            //         setSelectedStuff={setSelectedStuff}\n            //         setZoomedState={setZoomedState}\n            //         brushedState={brushedState}\n            //         setBrushedState={setBrushedState}\n            //         // brushedRect={brushedRect}\n            //         // setBrushedRect={setBrushedRect}\n            //       />\n            //   </div>\n            //   <div \n            //     className={'shadow'}\n            //     style={{'height': '100%','width':'14em','display':'inline-block','verticalAlign':'text-bottom'}}\n            //   >\n            //     <h1>{'Instructions'}</h1>\n            //     <p>{'Click on each state to zoom and unzoom'}</p>\n            //   </div>\n            // </div>\n            // <div style={{'height': '49%','width':'99%'}}>\n            //   <div className={'title'} \n            //     style={{'height':'2em','width':'100%','fontWeight':'bold','fontFamily':'Georgia'}}\n            //   >\n            //     {'Gun Deaths'}\n            //   </div>\n            //   <div style={{'height': 'calc(100% - 2em)','width': '50%','maxWidth': '60em','marginLeft':'25%'}}>\n            //     <WhiteHatStats\n            //       data={gunData}\n            //       ToolTip={ToolTip}\n            //       brushedState={brushedState}\n            //       setBrushedState={setBrushedState}\n            //       // brushedRect={brushedRect}\n            //       // setBrushedRect={setBrushedRect}\n            //       zoomedState={zoomedState}\n            //     />     \n            //   </div>   \n            // </div>\n          // </>\n        )\n      }\n\n  //function for a simpler chloropleth map\n  function makeBlackHat(){\n\n    return (\n\n        <div style={{'width':'20%','height':'100%','display':'inline-block', 'background': 'grey'}}>\n          <h1>{'Menu'}</h1>\n        </div>\n      // <>\n      //   <div style={{'width':'100%','height':'50%','display':'inline-block'}}>\n      //     <div \n      //       style={{'height': '100%','width':'calc(100% - 15em)','display':'inline-block'}}\n      //     >\n      //         <Blackhat\n      //           map={map}\n      //           data={gunData}\n      //           ToolTip={ToolTip}\n      //           zoomedState={zoomedState}\n      //           setSelectedStuff={setSelectedStuff}\n      //           setZoomedState={setZoomedState}\n      //           brushedState={brushedState}\n      //           setBrushedState={setBrushedState}\n      //         />\n      //     </div>\n      //     <div \n      //       className={'shadow'}\n      //       style={{'height': '100%','width':'14em','display':'inline-block','verticalAlign':'text-bottom'}}\n      //     >\n      //       <h1>{'Instructions'}</h1>\n      //       <p>{'Click on each state to zoom and unzoom'}</p>\n      //     </div>\n      //   </div>\n      //   <div style={{'height': '49%','width':'99%'}}>\n      //     <div className={'title'} \n      //       style={{'height':'2em','width':'100%','fontWeight':'bold','fontFamily':'Georgia'}}\n      //     >\n      //       {'Gun Deaths'}\n      //     </div>\n      //     <div style={{'height': 'calc(100% - 2em)','width': '50%','maxWidth': '60em','marginLeft':'25%'}}>\n      //       <BlackHatStats\n      //         data={gunData}\n      //         ToolTip={ToolTip}\n      //       />     \n      //     </div>   \n      //   </div>\n      // </>\n    )\n  }\n\n  //toggle which visualization we're looking at based on the \"viewToggle\" state\n  const hat = ()=>{\n    if(viewToggle === 'whitehat'){\n      return makeWhiteHat();\n    }\n    else{\n      return makeBlackHat();\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={'header'}\n        style={{'height':'2em','width':'100vw'}}\n      >\n        <button \n         onClick={() => setViewToggle('whitehat')}\n         className={viewToggle === 'whitehat'? 'inactiveButton':'activeButton'}\n         >{\"White Hat\"}\n        </button>\n        <button \n         onClick={() => setViewToggle('blackhat')}\n         className={viewToggle === 'blackhat'? 'inactiveButton':'activeButton'}\n         >{\"Black Hat\"}\n        </button>\n      </div>\n      <div className={'body'} \n        style={{'height':'calc(100vh - 2.5em)','width':'100vw'}}\n        >\n        {hat()}\n      </div>\n    </div>\n  );\n}\n\n\nclass ToolTip {\n  static moveTTip(tTip, tipX, tipY){\n    var tipBBox = tTip.node().getBoundingClientRect();\n    while(tipBBox.width + tipX > window.innerWidth){\n        tipX = tipX - 10 ;\n    }\n    while(tipBBox.height + tipY > window.innerHeight){\n        tipY = tipY - 10 ;\n    }\n    tTip.style('left', tipX + 'px')\n        .style('top', tipY + 'px')\n        .style('visibility', 'visible')\n        .style('z-index', 1000);\n  }\n\n  static moveTTipEvent(tTip, event){\n      var tipX = event.pageX + 30;\n      var tipY = event.pageY -20;\n      this.moveTTip(tTip,tipX,tipY);\n  }\n\n\n  static hideTTip(tTip){\n      tTip.style('visibility', 'hidden')\n  }\n\n  static addTTipCanvas(tTip, className, width, height){\n      tTip.selectAll('svg').selectAll('.'+className).remove();\n      let canvas = tTip.append('svg').attr('class',className)\n          .attr('height',height).attr('width',width)\n          .style('background','white');\n      return canvas\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}