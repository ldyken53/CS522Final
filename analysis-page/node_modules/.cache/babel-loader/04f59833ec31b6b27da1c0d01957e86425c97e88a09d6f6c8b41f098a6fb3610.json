{"ast":null,"code":"var _jsxFileName = \"/Users/kokofan/Documents/project/CS522_analysis/src/lineChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlotLineChart(props) {\n  _s();\n  // //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  // console.log(svg, height, width, tTip);\n\n  const chartSelection = useMemo(() => {\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n    var categories = ['Adult', 'Violence', 'Hate_Speech', 'Discrimination', 'Online_Predators'];\n    const dates = props.data.map(d => d.date);\n    const padding = 40;\n    const counts = {};\n    for (const d of dates) {\n      counts[d] = counts[d] ? counts[d] + 1 : 1;\n    }\n    const allDates = Object.keys(counts);\n    const data = [];\n    for (var k in allDates) {\n      for (var c in categories) {\n        var res = props.data.filter(function (d) {\n          return d.date == allDates[k] && d.category == categories[c];\n        });\n        let entry = {\n          'date': allDates[k],\n          'category': categories[c],\n          'count': res.length\n        };\n        data.push(entry);\n      }\n    }\n    const sumstat = d3.group(data, d => d.category);\n    console.log(sumstat);\n    const dateLen = Object.keys(counts).length;\n    var x = d3.scaleBand().domain(allDates).range([0, width - padding * 2]);\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + padding + ',' + (height - 1.5 * padding) + \") \").call(d3.axisBottom(x).ticks(dateLen)).selectAll(\"text\").attr(\"transform\", \"translate(-10,20)rotate(-45)\").style(\"text-anchor\", \"middle\").style(\"font-size\", 10);\n    var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n      return +d.count;\n    })]).range([height - padding * 2, 0]);\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + padding + ',' + 0.5 * padding + \")\").call(d3.axisLeft(y));\n    const color = d3.scaleOrdinal().range(['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999']);\n\n    // Draw the line\n    svg.selectAll(\".line\").data(sumstat).join(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", function (d) {\n      return color(d[0]);\n    }).attr(\"stroke-width\", 1.5).attr(\"d\", function (d) {\n      return d3.line().x(function (d) {\n        return x(d.date);\n      }).y(function (d) {\n        return y(+d.count);\n      })(d[1]);\n    });\n\n    // var line = d3.line()\n    //     .x(function(d) { return x(d.date); }) // set the x values for the line generator\n    //     .y(function(d) { return y(d.count); }) // set the y values for the line generator \n    //     .curve(d3.curveMonotoneX); // apply smoothing to the line\n\n    // svg.selectAll(\".line\")\n    //     .data(data)\n    //     .enter()\n    //     .append(\"path\")\n    //         .attr(\"fill\", \"none\")\n    //         .attr(\"stroke\", 'black')\n    //         .attr(\"stroke-width\", 1.5)\n    //         .attr(\"d\", line);\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(PlotLineChart, \"ZIF2Y6G+4lDrENfXS4yyPmH62/0=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = PlotLineChart;\nvar _c;\n$RefreshReg$(_c, \"PlotLineChart\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","PlotLineChart","props","_s","d3Container","svg","height","width","tTip","chartSelection","undefined","data","categories","dates","map","d","date","padding","counts","allDates","Object","keys","k","c","res","filter","category","entry","length","push","sumstat","group","console","log","dateLen","x","scaleBand","domain","range","append","attr","call","axisBottom","ticks","selectAll","style","y","scaleLinear","max","count","axisLeft","color","scaleOrdinal","join","line","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kokofan/Documents/project/CS522_analysis/src/lineChart.js"],"sourcesContent":["import React, {useEffect, useRef, useMemo} from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n\nexport default function PlotLineChart(props){\n    // //this is a generic component for plotting a d3 plot\n    const d3Container = useRef(null);\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n    // console.log(svg, height, width, tTip);\n\n    const chartSelection = useMemo(()=>{\n        if(svg === undefined | props.data === undefined){ return }\n\n        var categories = ['Adult', 'Violence', 'Hate_Speech', 'Discrimination', 'Online_Predators'];\n\n        const dates =  props.data.map(d => d.date);\n        const padding = 40;\n\n        const counts = {};\n        for (const d of dates) {\n          counts[d] = counts[d] ? counts[d] + 1 : 1;\n        }\n\n        const allDates = Object.keys(counts);\n\n        const data = [] \n        for (var k in allDates){\n            for (var c in categories){\n                var res = props.data.filter(function (d) {\n                    return d.date == allDates[k] &&\n                    d.category == categories[c];\n                });\n\n                let entry = {\n                    'date': allDates[k],\n                    'category': categories[c],\n                    'count': res.length,\n                }\n\n                data.push(entry);\n            }\n        }\n\n        const sumstat = d3.group(data, d => d.category); \n\n        console.log(sumstat);\n\n        const dateLen = Object.keys(counts).length;\n\n        var x = d3.scaleBand()\n            .domain(allDates)       \n            .range([0, width - padding*2]); \n\n        svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + padding + ',' + (height-1.5*padding) + \") \")\n                .call(d3.axisBottom(x).ticks(dateLen))\n                .selectAll(\"text\")\n                .attr(\"transform\", \"translate(-10,20)rotate(-45)\")\n                .style(\"text-anchor\", \"middle\")\n                .style(\"font-size\", 10);\n\n        var y = d3.scaleLinear()\n                  .domain([0, d3.max(data, function(d) { return +d.count; })])\n                  .range([ height - padding*2, 0 ]);\n  \n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + padding + ',' + 0.5*padding + \")\")\n            .call(d3.axisLeft(y));\n\n        const color = d3.scaleOrdinal()\n            .range(['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf','#999999'])\n\n\n          // Draw the line\n          svg.selectAll(\".line\")\n              .data(sumstat)\n              .join(\"path\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", function(d){ return color(d[0]) })\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"d\", function(d){\n                  return d3.line()\n                    .x(function(d) { return x(d.date); })\n                    .y(function(d) { return y(+d.count); })\n                    (d[1])\n                })\n\n        // var line = d3.line()\n        //     .x(function(d) { return x(d.date); }) // set the x values for the line generator\n        //     .y(function(d) { return y(d.count); }) // set the y values for the line generator \n        //     .curve(d3.curveMonotoneX); // apply smoothing to the line\n\n        // svg.selectAll(\".line\")\n        //     .data(data)\n        //     .enter()\n        //     .append(\"path\")\n        //         .attr(\"fill\", \"none\")\n        //         .attr(\"stroke\", 'black')\n        //         .attr(\"stroke-width\", 1.5)\n        //         .attr(\"d\", line);\n\n    });\n\n    return (\n        <div\n            className={\"d3-component\"}\n            style={{'height':'99%','width':'99%'}}\n            ref={d3Container}\n        ></div>\n    );\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}