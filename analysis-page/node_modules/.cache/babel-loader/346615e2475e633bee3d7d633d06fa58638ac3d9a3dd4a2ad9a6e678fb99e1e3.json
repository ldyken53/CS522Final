{"ast":null,"code":"var _jsxFileName = \"/Users/kokofan/Documents/project/CS522_analysis/src/barChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlotBarChart(props) {\n  _s();\n  // //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  // console.log(svg, height, width, tTip);\n\n  const chartSelection = useMemo(() => {\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n    var categories = ['Adult', 'Violence', 'Hate_Speech', 'Discrimination', 'Online_Predators'];\n\n    // console.log(props.data);\n\n    const feedbacks = ['Agree', 'Disagree'];\n    const data = [];\n    for (var k in feedbacks) {\n      for (var c in categories) {\n        var res = props.data.filter(function (d) {\n          return d.date == feedbacks[k] && d.category == categories[c];\n        });\n        console.log(res);\n\n        // let entry = {\n        //     'date': allDates[k],\n        //     'category': categories[c],\n        //     'count': res.length,\n        // }\n\n        // data.push(entry);\n      }\n    }\n\n    // const dates =  props.data.map(d => d.date);\n    // const padding = 40;\n\n    // const counts = {};\n    // for (const d of dates) {\n    //   counts[d] = counts[d] ? counts[d] + 1 : 1;\n    // }\n\n    // const allDates = Object.keys(counts);\n\n    // const data = [] \n    // for (var k in allDates){\n    //     for (var c in categories){\n    //         var res = props.data.filter(function (d) {\n    //             return d.date == allDates[k] &&\n    //             d.category == categories[c];\n    //         });\n\n    //         let entry = {\n    //             'date': allDates[k],\n    //             'category': categories[c],\n    //             'count': res.length,\n    //         }\n\n    //         data.push(entry);\n    //     }\n    // }\n\n    // const sumstat = d3.group(data, d => d.category); \n\n    // // console.log(sumstat);\n\n    // const dateLen = Object.keys(counts).length;\n\n    // var x = d3.scaleBand()\n    //     .domain(allDates)       \n    //     .range([0, width - padding*3]); \n\n    // svg.append(\"g\")\n    //         .attr(\"transform\", \"translate(\" + padding + ',' + (height-1.5*padding) + \") \")\n    //         .call(d3.axisBottom(x).ticks(dateLen))\n    //         .selectAll(\"text\")\n    //         .attr(\"transform\", \"translate(-10,20)rotate(-45)\")\n    //         .style(\"text-anchor\", \"middle\")\n    //         .style(\"font-size\", 10);\n\n    // var y = d3.scaleLinear()\n    //           .domain([0, d3.max(data, function(d) { return +d.count; })])\n    //           .range([ height - padding*2.5, 0 ]);\n\n    // svg.append(\"g\")\n    //     .attr(\"transform\", \"translate(\" + padding + ',' + 1*padding + \")\")\n    //     .call(d3.axisLeft(y));\n\n    // const color = d3.scaleOrdinal()\n    //     .range(['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf','#999999'])\n\n    //   // Draw the line\n    //   svg.selectAll(\".line\")\n    //       .data(sumstat)\n    //       .join(\"path\")\n    //         .attr(\"fill\", \"none\")\n    //         .attr(\"stroke\", function(d){ return color(d[0]) })\n    //         .attr(\"stroke-width\", 1.5)\n    //         .attr(\"d\", function(d){\n    //           return d3.line()\n    //             .x(function(d) { return x(d.date); })\n    //             .y(function(d) { return y(+d.count); })\n    //             (d[1])\n    //         })\n    //         .attr(\"transform\", \"translate(\" + padding + ',' + 0.5*padding + \")\");\n\n    // var legend = svg.append('g')\n    //     .attr('class', 'legend')\n    //     .attr('transform', 'translate(' + (width - padding*2) + \", \" + padding + ')' );\n\n    // var legend_colors = ['#e41a1c', '#377eb8', '#4daf4a', '#ff7f00'];\n    // // draw legends\n    // legend.selectAll('rect')\n    //       .data(categories)\n    //       .enter()\n    //       .append('rect')\n    //       .attr('x', 0)\n    //       .attr('y', function(d, i){ return i * 18; })\n    //       .attr('width', 12)\n    //       .attr('height', 12)\n    //       .attr('fill', function(d, i){\n    //           return legend_colors[i];\n    //       });\n\n    // legend.selectAll('text')\n    //       .data(categories)\n    //       .enter()\n    //       .append('text')\n    //       .text(function(d){ return d; })\n    //       .attr('x', 19)\n    //       .attr('y', function(d, i){ return i * 19;})\n    //       .attr('text-anchor', 'start')\n    //       .attr('alignment-baseline', 'hanging')\n    //       .style(\"font-size\", 7);\n\n    // svg.append(\"text\")\n    //    .attr(\"class\", \"x-label\")\n    //    .attr(\"x\", width - padding)\n    //    .attr(\"y\", height - padding)\n    //    .attr(\"text-anchor\", \"middle\")\n    //    .text(\"Date\")\n\n    // // lable of y axis\n    // svg.append(\"text\")\n    //    .attr(\"class\", \"y-label\")\n    //    .attr(\"text-anchor\", \"middle\")\n    //    .attr(\"x\", -height/2)\n    //    .attr(\"y\", padding/4)\n    //    .attr(\"dy\", \".75em\")\n    //    .attr(\"transform\", \"rotate(-90)\")\n    //    .text(\"Access Count\");\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n}\n_s(PlotBarChart, \"ZIF2Y6G+4lDrENfXS4yyPmH62/0=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = PlotBarChart;\nvar _c;\n$RefreshReg$(_c, \"PlotBarChart\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","PlotBarChart","props","_s","d3Container","svg","height","width","tTip","chartSelection","undefined","data","categories","feedbacks","k","c","res","filter","d","date","category","console","log","className","style","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kokofan/Documents/project/CS522_analysis/src/barChart.js"],"sourcesContent":["import React, {useEffect, useRef, useMemo} from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n\nexport default function PlotBarChart(props){\n    // //this is a generic component for plotting a d3 plot\n    const d3Container = useRef(null);\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n    // console.log(svg, height, width, tTip);\n\n    const chartSelection = useMemo(()=>{\n        if(svg === undefined | props.data === undefined){ return }\n\n        var categories = ['Adult', 'Violence', 'Hate_Speech', 'Discrimination', 'Online_Predators'];\n\n        // console.log(props.data);\n\n        const feedbacks = ['Agree', 'Disagree'];\n\n        const data = [] \n        for (var k in feedbacks){\n            for (var c in categories){\n                var res = props.data.filter(function (d) {\n                    return d.date == feedbacks[k] &&\n                    d.category == categories[c];\n                });\n\n                console.log(res);\n\n                // let entry = {\n                //     'date': allDates[k],\n                //     'category': categories[c],\n                //     'count': res.length,\n                // }\n\n                // data.push(entry);\n            }\n        }\n\n\n        // const dates =  props.data.map(d => d.date);\n        // const padding = 40;\n\n        // const counts = {};\n        // for (const d of dates) {\n        //   counts[d] = counts[d] ? counts[d] + 1 : 1;\n        // }\n\n        // const allDates = Object.keys(counts);\n\n        // const data = [] \n        // for (var k in allDates){\n        //     for (var c in categories){\n        //         var res = props.data.filter(function (d) {\n        //             return d.date == allDates[k] &&\n        //             d.category == categories[c];\n        //         });\n\n        //         let entry = {\n        //             'date': allDates[k],\n        //             'category': categories[c],\n        //             'count': res.length,\n        //         }\n\n        //         data.push(entry);\n        //     }\n        // }\n\n        // const sumstat = d3.group(data, d => d.category); \n\n        // // console.log(sumstat);\n\n        // const dateLen = Object.keys(counts).length;\n\n        // var x = d3.scaleBand()\n        //     .domain(allDates)       \n        //     .range([0, width - padding*3]); \n\n        // svg.append(\"g\")\n        //         .attr(\"transform\", \"translate(\" + padding + ',' + (height-1.5*padding) + \") \")\n        //         .call(d3.axisBottom(x).ticks(dateLen))\n        //         .selectAll(\"text\")\n        //         .attr(\"transform\", \"translate(-10,20)rotate(-45)\")\n        //         .style(\"text-anchor\", \"middle\")\n        //         .style(\"font-size\", 10);\n\n        // var y = d3.scaleLinear()\n        //           .domain([0, d3.max(data, function(d) { return +d.count; })])\n        //           .range([ height - padding*2.5, 0 ]);\n  \n        // svg.append(\"g\")\n        //     .attr(\"transform\", \"translate(\" + padding + ',' + 1*padding + \")\")\n        //     .call(d3.axisLeft(y));\n\n        // const color = d3.scaleOrdinal()\n        //     .range(['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf','#999999'])\n\n\n        //   // Draw the line\n        //   svg.selectAll(\".line\")\n        //       .data(sumstat)\n        //       .join(\"path\")\n        //         .attr(\"fill\", \"none\")\n        //         .attr(\"stroke\", function(d){ return color(d[0]) })\n        //         .attr(\"stroke-width\", 1.5)\n        //         .attr(\"d\", function(d){\n        //           return d3.line()\n        //             .x(function(d) { return x(d.date); })\n        //             .y(function(d) { return y(+d.count); })\n        //             (d[1])\n        //         })\n        //         .attr(\"transform\", \"translate(\" + padding + ',' + 0.5*padding + \")\");\n\n\n        // var legend = svg.append('g')\n        //     .attr('class', 'legend')\n        //     .attr('transform', 'translate(' + (width - padding*2) + \", \" + padding + ')' );\n\n        // var legend_colors = ['#e41a1c', '#377eb8', '#4daf4a', '#ff7f00'];\n        // // draw legends\n        // legend.selectAll('rect')\n        //       .data(categories)\n        //       .enter()\n        //       .append('rect')\n        //       .attr('x', 0)\n        //       .attr('y', function(d, i){ return i * 18; })\n        //       .attr('width', 12)\n        //       .attr('height', 12)\n        //       .attr('fill', function(d, i){\n        //           return legend_colors[i];\n        //       });\n\n        // legend.selectAll('text')\n        //       .data(categories)\n        //       .enter()\n        //       .append('text')\n        //       .text(function(d){ return d; })\n        //       .attr('x', 19)\n        //       .attr('y', function(d, i){ return i * 19;})\n        //       .attr('text-anchor', 'start')\n        //       .attr('alignment-baseline', 'hanging')\n        //       .style(\"font-size\", 7);\n\n        // svg.append(\"text\")\n        //    .attr(\"class\", \"x-label\")\n        //    .attr(\"x\", width - padding)\n        //    .attr(\"y\", height - padding)\n        //    .attr(\"text-anchor\", \"middle\")\n        //    .text(\"Date\")\n\n        // // lable of y axis\n        // svg.append(\"text\")\n        //    .attr(\"class\", \"y-label\")\n        //    .attr(\"text-anchor\", \"middle\")\n        //    .attr(\"x\", -height/2)\n        //    .attr(\"y\", padding/4)\n        //    .attr(\"dy\", \".75em\")\n        //    .attr(\"transform\", \"rotate(-90)\")\n        //    .text(\"Access Count\");\n\n\n    });\n\n    return (\n        <div\n            className={\"d3-component\"}\n            style={{'height':'99%','width':'99%'}}\n            ref={d3Container}\n        ></div>\n    );\n}\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,OAAO,QAAO,OAAO;AACvD,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzB,eAAe,SAASC,YAAYA,CAACC,KAAK,EAAC;EAAAC,EAAA;EACvC;EACA,MAAMC,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAACU,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,CAAC,GAAGX,YAAY,CAACO,WAAW,CAAC;EAC5D;;EAEA,MAAMK,cAAc,GAAGb,OAAO,CAAC,MAAI;IAC/B,IAAGS,GAAG,KAAKK,SAAS,GAAGR,KAAK,CAACS,IAAI,KAAKD,SAAS,EAAC;MAAE;IAAO;IAEzD,IAAIE,UAAU,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,gBAAgB,EAAE,kBAAkB,CAAC;;IAE3F;;IAEA,MAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC;IAEvC,MAAMF,IAAI,GAAG,EAAE;IACf,KAAK,IAAIG,CAAC,IAAID,SAAS,EAAC;MACpB,KAAK,IAAIE,CAAC,IAAIH,UAAU,EAAC;QACrB,IAAII,GAAG,GAAGd,KAAK,CAACS,IAAI,CAACM,MAAM,CAAC,UAAUC,CAAC,EAAE;UACrC,OAAOA,CAAC,CAACC,IAAI,IAAIN,SAAS,CAACC,CAAC,CAAC,IAC7BI,CAAC,CAACE,QAAQ,IAAIR,UAAU,CAACG,CAAC,CAAC;QAC/B,CAAC,CAAC;QAEFM,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;;QAEhB;QACA;QACA;QACA;QACA;;QAEA;MACJ;IACJ;;IAGA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;;IAEA;;IAEA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAGJ,CAAC,CAAC;;EAEF,oBACIhB,OAAA;IACIuB,SAAS,EAAE,cAAe;IAC1BC,KAAK,EAAE;MAAC,QAAQ,EAAC,KAAK;MAAC,OAAO,EAAC;IAAK,CAAE;IACtCC,GAAG,EAAErB;EAAY;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEf;AAAC1B,EAAA,CAtKuBF,YAAY;EAAA,QAGGJ,YAAY;AAAA;AAAAiC,EAAA,GAH3B7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}