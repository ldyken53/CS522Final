{"ast":null,"code":"var _jsxFileName = \"/Users/kokofan/Documents/project/CS529HW1/src/WhiteHatStats.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo } from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WhiteHatStats(props) {\n  _s();\n  //this is a generic component for plotting a d3 plot\n  const d3Container = useRef(null);\n  //this automatically constructs an svg canvas the size of the parent container (height and width)\n  //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n  //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n  const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n  // console.log(svg, height, width, tTip);\n\n  const margin = 50;\n  // const radius = 10;\n\n  //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. This other representation could be a histogram, a stacked bar chart, etc.\n  //this loop updates when the props.data changes or the window resizes\n  //we can edit it to also use props.brushedState if you want to use linking\n  useEffect(() => {\n    //wait until the data loads\n    if (svg === undefined | props.data === undefined) {\n      return;\n    }\n\n    //aggregate gun deaths by state\n    const data = props.data.states;\n    const countmap = d => d.count;\n    const stateCounts = Object.values(data).map(countmap);\n    const [stateMin, stateMax] = d3.extent(stateCounts);\n\n    //get data for each state\n    const plotData = [];\n    for (let state of data) {\n      let entry = {\n        'ab': state.abreviation,\n        'name': state.state,\n        'population': state.population,\n        'male': state.male_count,\n        'female': state.count - state.male_count\n      };\n      plotData.push(entry);\n    }\n    var groups = d3.map(data, function (d) {\n      return d.abreviation;\n    });\n    var xScale = d3.scaleBand().domain(groups).range([0, width - margin]).padding([0.3]);\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + margin + \", \" + (height - margin) + \")\").call(d3.axisBottom(xScale).tickSizeOuter(0));\n    let yScale = d3.scaleLinear().domain([stateMax, 0]).range([margin, height - margin]);\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\").call(d3.axisLeft(yScale));\n    var barkeys = ['male', 'female'];\n    var color = d3.scaleOrdinal().domain(barkeys).range(['#08519c', '#a3baff']);\n    var stackedData = d3.stack().keys(barkeys)(plotData);\n    console.log(stackedData);\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\").selectAll(\"g\").data(stackedData).enter().append(\"g\").attr(\"fill\", function (d) {\n      return color(d.key);\n    }).selectAll(\"rect\").data(function (d) {\n      return d;\n    }).enter().append(\"rect\").attr(\"x\", function (d) {\n      return xScale(d.data.ab);\n    }).attr(\"y\", function (d) {\n      return yScale(d[1]);\n    }).attr(\"height\", function (d) {\n      return yScale(d[0]) - yScale(d[1]);\n    }).attr(\"width\", xScale.bandwidth()).on('mouseover', (e, d) => {\n      var catName;\n      if (d[0] == 0) {\n        catName = d.date.male;\n      } else {\n        console.log(d);\n      }\n      // let string = d.date.name + '</br>'\n      //     +  catName + '</br>'\n      //     + 'population: ' + d.data.population;\n      // props.ToolTip.moveTTipEvent(tTip,e)\n      // tTip.html(string)\n    }).on('mousemove', e => {\n      props.ToolTip.moveTTipEvent(tTip, e);\n    }).on('mouseout', (e, d) => {\n      props.ToolTip.hideTTip(tTip);\n    });\n\n    // svg.selectAll('.rect').remove();\n    // svg.selectAll('.rect').data(data)\n    //    .enter().append('rect')\n    //    .attr('x', (d,i) => xScale(i))\n    //    .attr('width', width/data.length)\n    //    .attr('height', d => {\n    //         // return y(d[0])-y(d[1])\n    //     })\n\n    // .attr('y', d => y(d[1]))\n    // .attr('fill', d => d.key == 'Births' ? 'lightBlue' : 'orange')\n    // .attr('opacity', .5)\n    // .attr('stroke', 'red')\n    // .attr('stroke-width', 1)\n    //get data for each state\n    //     const plotData = [];\n    //     for(let state of data){\n    //         const dd = drawingDifficulty[state.abreviation];\n    //         let entry = {\n    //             'count': state.count,\n    //             'name': state.state,\n    //             'easeOfDrawing': dd === undefined? 5: dd,\n    //             'genderRatio': state.male_count/state.count,\n    //         }\n    //         plotData.push(entry)\n    //     }\n\n    //     //get transforms for each value into x and y coordinates\n    //     let xScale = d3.scaleLinear()\n    //         .domain(d3.extent(plotData,d=>d.easeOfDrawing))\n    //         .range([margin+radius,width-margin-radius]);\n    //     let yScale = d3.scaleLinear()\n    //         .domain(d3.extent(plotData,d=>d.count))\n    //         .range([height-margin-radius,margin+radius]);\n\n    //     //draw a line showing the mean values across the curve\n    //     //this probably isn't actually regression\n    //     const regressionLine = [];\n    //     for(let i = 0; i <= 10; i+= 1){\n    //         let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n    //         let meanY = 0;\n    //         if(pvals.length > 0){\n    //             for(let entry of pvals){\n    //                 meanY += entry.count/pvals.length\n    //             }\n    //         }\n    //         let point = [xScale(i),yScale(meanY)]\n    //         regressionLine.push(point)\n    //     }\n\n    //     //scale color by gender ratio for no reason\n    //     let colorScale = d3.scaleDiverging()\n    //         .domain([0,.5,1])\n    //         .range(['magenta','white','navy']);\n\n    //     //draw the circles for each state\n    //     svg.selectAll('.dot').remove();\n    //     svg.selectAll('.dot').data(plotData)\n    //         .enter().append('circle')\n    //         .attr('cy',d=> yScale(d.count))\n    //         .attr('cx',d=>xScale(d.easeOfDrawing))\n    //         .attr('fill',d=> colorScale(d.genderRatio))\n    //         .attr('r',10)\n    //         .on('mouseover',(e,d)=>{\n    //             let string = d.name + '</br>'\n    //                 + 'Gun Deaths: ' + d.count + '</br>'\n    //                 + 'Difficulty Drawing: ' + d.easeOfDrawing;\n    //             props.ToolTip.moveTTipEvent(tTip,e)\n    //             tTip.html(string)\n    //         }).on('mousemove',(e)=>{\n    //             props.ToolTip.moveTTipEvent(tTip,e);\n    //         }).on('mouseout',(e,d)=>{\n    //             props.ToolTip.hideTTip(tTip);\n    //         });\n\n    //     //draw the line\n    //     svg.selectAll('.regressionLine').remove();\n    //     svg.append('path').attr('class','regressionLine')\n    //         .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\n    //         .attr('stroke-width',5)\n    //         .attr('stroke','black')\n    //         .attr('fill','none');\n\n    //     //change the title\n    //     const labelSize = margin/2;\n    //     svg.selectAll('text').remove();\n    //     svg.append('text')\n    //         .attr('x',width/2)\n    //         .attr('y',labelSize)\n    //         .attr('text-anchor','middle')\n    //         .attr('font-size',labelSize)\n    //         .attr('font-weight','bold')\n    //         .text('How Hard it Is To Draw Each State Vs Gun Deaths');\n\n    //     //change the disclaimer here\n    //     svg.append('text')\n    //         .attr('x',width-20)\n    //         .attr('y',height/3)\n    //         .attr('text-anchor','end')\n    //         .attr('font-size',10)\n    //         .text(\"I'm just asking questions\");\n\n    //     //draw basic axes using the x and y scales\n    //     svg.selectAll('g').remove()\n    //     svg.append('g')\n    //         .attr('transform',`translate(0,${height-margin+1})`)\n    //         .call(d3.axisBottom(xScale))\n\n    //     svg.append('g')\n    //         .attr('transform',`translate(${margin-2},0)`)\n    //         .call(d3.axisLeft(yScale))\n  }, [props.data, svg]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3-component\",\n    style: {\n      'height': '99%',\n      'width': '99%'\n    },\n    ref: d3Container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }, this);\n}\n//END of TODO #1.\n\n// const drawingDifficulty = {\n//     'IL': 9,\n//     'AL': 2,\n//     'AK': 1,\n//     'AR': 3,\n//     'CA': 9.51,\n//     'CO': 0,\n//     'DE': 3.1,\n//     'DC': 1.3,\n//     'FL': 8.9,\n//     'GA': 3.9,\n//     'HI': 4.5,\n//     'ID': 4,\n//     'IN': 4.3,\n//     'IA': 4.1,\n//     'KS': 1.6,\n//     'KY': 7,\n//     'LA': 6.5,\n//     'MN': 2.1,\n//     'MO': 5.5,\n//     'ME': 7.44,\n//     'MD': 10,\n//     'MA': 6.8,\n//     'MI': 9.7,\n//     'MN': 5.1,\n//     'MS': 3.8,\n//     'MT': 1.4,\n//     'NE': 1.9,\n//     'NV': .5,\n//     'NH': 3.7,\n//     'NJ': 9.1,\n//     'NM': .2,\n//     'NY': 8.7,\n//     'NC': 8.5,\n//     'ND': 2.3,\n//     'OH': 5.8,\n//     'OK': 6.05,\n//     'OR': 4.7,\n//     'PA': 4.01,\n//     'RI': 8.4,\n//     'SC': 7.1,\n//     'SD': .9,\n//     'TN': 3.333333,\n//     'TX': 8.1,\n//     'UT': 2.8,\n//     'VT': 2.6,\n//     'VA': 8.2,\n//     'WA': 9.2,\n//     'WV': 7.9,\n//     'WY': 0,\n// }\n_s(WhiteHatStats, \"WSxzHn2M6v/mpwTKCm+WLF/lrvI=\", false, function () {\n  return [useSVGCanvas];\n});\n_c = WhiteHatStats;\nvar _c;\n$RefreshReg$(_c, \"WhiteHatStats\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useSVGCanvas","d3","jsxDEV","_jsxDEV","WhiteHatStats","props","_s","d3Container","svg","height","width","tTip","margin","undefined","data","states","countmap","d","count","stateCounts","Object","values","map","stateMin","stateMax","extent","plotData","state","entry","abreviation","population","male_count","push","groups","xScale","scaleBand","domain","range","padding","append","attr","call","axisBottom","tickSizeOuter","yScale","scaleLinear","axisLeft","barkeys","color","scaleOrdinal","stackedData","stack","keys","console","log","selectAll","enter","key","ab","bandwidth","on","e","catName","date","male","ToolTip","moveTTipEvent","hideTTip","className","style","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kokofan/Documents/project/CS529HW1/src/WhiteHatStats.js"],"sourcesContent":["import React, {useEffect, useRef,useMemo} from 'react';\nimport useSVGCanvas from './useSVGCanvas.js';\nimport * as d3 from 'd3';\n\n//change the code below to modify the bottom plot view\nexport default function WhiteHatStats(props){\n    //this is a generic component for plotting a d3 plot\n    const d3Container = useRef(null);\n    //this automatically constructs an svg canvas the size of the parent container (height and width)\n    //tTip automatically attaches a div of the class 'tooltip' if it doesn't already exist\n    //this will automatically resize when the window changes so passing svg to a useeffect will re-trigger\n    const [svg, height, width, tTip] = useSVGCanvas(d3Container);\n    // console.log(svg, height, width, tTip);\n\n    const margin = 50;\n    // const radius = 10;\n\n\n    //TODO: modify or replace the code below to draw a more truthful or insightful representation of the dataset. This other representation could be a histogram, a stacked bar chart, etc.\n    //this loop updates when the props.data changes or the window resizes\n    //we can edit it to also use props.brushedState if you want to use linking\n    useEffect(()=>{\n        //wait until the data loads\n        if(svg === undefined | props.data === undefined){ return }\n\n        //aggregate gun deaths by state\n        const data = props.data.states;\n\n        const countmap = d => d.count;\n        const stateCounts = Object.values(data).map(countmap);\n        const [stateMin,stateMax] = d3.extent(stateCounts);\n\n        //get data for each state\n        const plotData = [];\n        for(let state of data){\n            let entry = {\n                'ab': state.abreviation,\n                'name': state.state,\n                'population': state.population,\n                'male': state.male_count,\n                'female': (state.count - state.male_count),\n            }\n            plotData.push(entry)\n        }\n\n        var groups = d3.map(data, function(d){return(d.abreviation)})\n\n        var xScale = d3.scaleBand()\n                  .domain(groups)\n                  .range([0, width - margin])\n                  .padding([0.3])\n        \n        svg.append(\"g\")\n           .attr(\"transform\", \"translate(\" + margin + \", \" + (height - margin) + \")\")\n           .call(d3.axisBottom(xScale).tickSizeOuter(0));\n\n        let yScale = d3.scaleLinear()\n                       .domain([stateMax, 0])\n                       .range([margin, height - margin]);\n        \n        svg.append(\"g\")\n           .attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\")\n           .call(d3.axisLeft(yScale));\n\n        var barkeys = ['male', 'female'];\n\n        var color = d3.scaleOrdinal()\n                      .domain(barkeys)\n                      .range(['#08519c','#a3baff'])\n\n        var stackedData = d3.stack()\n                            .keys(barkeys)\n                            (plotData)\n        console.log(stackedData);\n\n        svg.append(\"g\")\n           .attr(\"transform\", \"translate(\" + margin + \", \" + 0 + \")\")\n           .selectAll(\"g\")\n           .data(stackedData)\n           .enter().append(\"g\")\n           .attr(\"fill\", function(d) { return color(d.key); })\n           .selectAll(\"rect\")\n           .data(function(d) { return d; })\n           .enter().append(\"rect\")\n           .attr(\"x\", function(d) { return xScale(d.data.ab); })\n           .attr(\"y\", function(d) { return yScale(d[1]); })\n           .attr(\"height\", function(d) { return yScale(d[0]) - yScale(d[1]); })\n           .attr(\"width\", xScale.bandwidth())\n           .on('mouseover',(e,d)=>{\n                var catName;\n                if (d[0] == 0) { catName = d.date.male; }\n                else { console.log(d); }\n                // let string = d.date.name + '</br>'\n                //     +  catName + '</br>'\n                //     + 'population: ' + d.data.population;\n                // props.ToolTip.moveTTipEvent(tTip,e)\n                // tTip.html(string)\n            }).on('mousemove',(e)=>{\n                props.ToolTip.moveTTipEvent(tTip,e);\n            }).on('mouseout',(e,d)=>{\n                props.ToolTip.hideTTip(tTip);\n            });\n\n\n        // svg.selectAll('.rect').remove();\n        // svg.selectAll('.rect').data(data)\n        //    .enter().append('rect')\n        //    .attr('x', (d,i) => xScale(i))\n        //    .attr('width', width/data.length)\n        //    .attr('height', d => {\n        //         // return y(d[0])-y(d[1])\n        //     })\n\n           // .attr('y', d => y(d[1]))\n           // .attr('fill', d => d.key == 'Births' ? 'lightBlue' : 'orange')\n           // .attr('opacity', .5)\n           // .attr('stroke', 'red')\n           // .attr('stroke-width', 1)\n        //get data for each state\n    //     const plotData = [];\n    //     for(let state of data){\n    //         const dd = drawingDifficulty[state.abreviation];\n    //         let entry = {\n    //             'count': state.count,\n    //             'name': state.state,\n    //             'easeOfDrawing': dd === undefined? 5: dd,\n    //             'genderRatio': state.male_count/state.count,\n    //         }\n    //         plotData.push(entry)\n    //     }\n\n    //     //get transforms for each value into x and y coordinates\n    //     let xScale = d3.scaleLinear()\n    //         .domain(d3.extent(plotData,d=>d.easeOfDrawing))\n    //         .range([margin+radius,width-margin-radius]);\n    //     let yScale = d3.scaleLinear()\n    //         .domain(d3.extent(plotData,d=>d.count))\n    //         .range([height-margin-radius,margin+radius]);\n\n\n    //     //draw a line showing the mean values across the curve\n    //     //this probably isn't actually regression\n    //     const regressionLine = [];\n    //     for(let i = 0; i <= 10; i+= 1){\n    //         let pvals = plotData.filter(d => Math.abs(d.easeOfDrawing - i) <= .5);\n    //         let meanY = 0;\n    //         if(pvals.length > 0){\n    //             for(let entry of pvals){\n    //                 meanY += entry.count/pvals.length\n    //             }\n    //         }\n    //         let point = [xScale(i),yScale(meanY)]\n    //         regressionLine.push(point)\n    //     }\n        \n    //     //scale color by gender ratio for no reason\n    //     let colorScale = d3.scaleDiverging()\n    //         .domain([0,.5,1])\n    //         .range(['magenta','white','navy']);\n\n    //     //draw the circles for each state\n    //     svg.selectAll('.dot').remove();\n    //     svg.selectAll('.dot').data(plotData)\n    //         .enter().append('circle')\n    //         .attr('cy',d=> yScale(d.count))\n    //         .attr('cx',d=>xScale(d.easeOfDrawing))\n    //         .attr('fill',d=> colorScale(d.genderRatio))\n    //         .attr('r',10)\n    //         .on('mouseover',(e,d)=>{\n    //             let string = d.name + '</br>'\n    //                 + 'Gun Deaths: ' + d.count + '</br>'\n    //                 + 'Difficulty Drawing: ' + d.easeOfDrawing;\n    //             props.ToolTip.moveTTipEvent(tTip,e)\n    //             tTip.html(string)\n    //         }).on('mousemove',(e)=>{\n    //             props.ToolTip.moveTTipEvent(tTip,e);\n    //         }).on('mouseout',(e,d)=>{\n    //             props.ToolTip.hideTTip(tTip);\n    //         });\n           \n    //     //draw the line\n    //     svg.selectAll('.regressionLine').remove();\n    //     svg.append('path').attr('class','regressionLine')\n    //         .attr('d',d3.line().curve(d3.curveBasis)(regressionLine))\n    //         .attr('stroke-width',5)\n    //         .attr('stroke','black')\n    //         .attr('fill','none');\n\n    //     //change the title\n    //     const labelSize = margin/2;\n    //     svg.selectAll('text').remove();\n    //     svg.append('text')\n    //         .attr('x',width/2)\n    //         .attr('y',labelSize)\n    //         .attr('text-anchor','middle')\n    //         .attr('font-size',labelSize)\n    //         .attr('font-weight','bold')\n    //         .text('How Hard it Is To Draw Each State Vs Gun Deaths');\n\n    //     //change the disclaimer here\n    //     svg.append('text')\n    //         .attr('x',width-20)\n    //         .attr('y',height/3)\n    //         .attr('text-anchor','end')\n    //         .attr('font-size',10)\n    //         .text(\"I'm just asking questions\");\n\n    //     //draw basic axes using the x and y scales\n    //     svg.selectAll('g').remove()\n    //     svg.append('g')\n    //         .attr('transform',`translate(0,${height-margin+1})`)\n    //         .call(d3.axisBottom(xScale))\n\n    //     svg.append('g')\n    //         .attr('transform',`translate(${margin-2},0)`)\n    //         .call(d3.axisLeft(yScale))\n        \n    },[props.data,svg]);\n\n    return (\n        <div\n            className={\"d3-component\"}\n            style={{'height':'99%','width':'99%'}}\n            ref={d3Container}\n        ></div>\n    );\n}\n//END of TODO #1.\n\n \n// const drawingDifficulty = {\n//     'IL': 9,\n//     'AL': 2,\n//     'AK': 1,\n//     'AR': 3,\n//     'CA': 9.51,\n//     'CO': 0,\n//     'DE': 3.1,\n//     'DC': 1.3,\n//     'FL': 8.9,\n//     'GA': 3.9,\n//     'HI': 4.5,\n//     'ID': 4,\n//     'IN': 4.3,\n//     'IA': 4.1,\n//     'KS': 1.6,\n//     'KY': 7,\n//     'LA': 6.5,\n//     'MN': 2.1,\n//     'MO': 5.5,\n//     'ME': 7.44,\n//     'MD': 10,\n//     'MA': 6.8,\n//     'MI': 9.7,\n//     'MN': 5.1,\n//     'MS': 3.8,\n//     'MT': 1.4,\n//     'NE': 1.9,\n//     'NV': .5,\n//     'NH': 3.7,\n//     'NJ': 9.1,\n//     'NM': .2,\n//     'NY': 8.7,\n//     'NC': 8.5,\n//     'ND': 2.3,\n//     'OH': 5.8,\n//     'OK': 6.05,\n//     'OR': 4.7,\n//     'PA': 4.01,\n//     'RI': 8.4,\n//     'SC': 7.1,\n//     'SD': .9,\n//     'TN': 3.333333,\n//     'TX': 8.1,\n//     'UT': 2.8,\n//     'VT': 2.6,\n//     'VA': 8.2,\n//     'WA': 9.2,\n//     'WV': 7.9,\n//     'WY': 0,\n// }\n"],"mappings":"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,KAAG;MACpBZ,KAAK,CAAC4D,OAAO,CAACE,QAAQ,CAACxD,IAAI,CAAC;IAChC,CAAC,CAAC;;IAGN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEG;IACA;IACA;IACA;IACA;IACH;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;EAEA,CAAC,EAAC,CAACN,KAAK,CAACS,IAAI,EAACN,GAAG,CAAC,CAAC;EAEnB,oBACIL,OAAA;IACIiE,SAAS,EAAE,cAAe;IAC1BC,KAAK,EAAE;MAAC,QAAQ,EAAC,KAAK;MAAC,OAAO,EAAC;IAAK,CAAE;IACtCC,GAAG,EAAE/D;EAAY;IAAAgE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEf;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAApE,EAAA,CAnRwBF,aAAa;EAAA,QAMEJ,YAAY;AAAA;AAAA2E,EAAA,GAN3BvE,aAAa;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}